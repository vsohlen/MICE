/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mice;

import java.util.*; //Import of the java util package


/**
 *
 * @author Victoria & Anton
 */
public class MainPage extends javax.swing.JFrame {

    private boolean isAdmin;        //a field that  decides what the user have access to
    private DbClass database;
    
    /**
     * Creates new form MainPage
     * @param isAdmin
     */
    public MainPage(boolean isAdmin) {
        initComponents();
        initDb();
        updateCBs();
            hideHiredChangeFields();
            hideGpAddFields();
            hideCompetenceUpdate();
            this.isAdmin = isAdmin;
            if (isAdmin)
            {
                initHiredFunctionsHired();
                initAdminFunctionsHired();
                initHiredFunctionsGameProject();
                initAdminFunctionsGameProject();
                initHiredFunctionsPlatform();
                initAdminFunctionsPlatform();
                initHiredFunctionsCompetence();
                initAdminFunctionsCompetence();
            }
            else
            {
                initHiredFunctionsHired();
                initHiredFunctionsGameProject();
                initHiredFunctionsPlatform();
                initHiredFunctionsCompetence();
            }
    }
    
    /**
     * This method initializes the database.
     */
    private void initDb()
    {
        database = new DbClass();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        tpMenu = new javax.swing.JTabbedPane();
        paneHired = new javax.swing.JPanel();
        lblErrorMessageHired = new javax.swing.JLabel();
        lblHeader = new javax.swing.JLabel();
        cbFunctions = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        tfsearchField = new javax.swing.JTextField();
        spHired = new javax.swing.JScrollPane();
        tasearchResult = new javax.swing.JTextArea();
        tpSubMenuHired = new javax.swing.JTabbedPane();
        paneChangeHired = new javax.swing.JPanel();
        btnChangeHired = new javax.swing.JButton();
        lblChangeMailHired = new javax.swing.JLabel();
        tfChangeMailHired = new javax.swing.JTextField();
        tfChangeTelephoneHired = new javax.swing.JTextField();
        lblChangeTelephoneHired = new javax.swing.JLabel();
        lblChangeFirstNameHired = new javax.swing.JLabel();
        tfChangeFirstNameHired = new javax.swing.JTextField();
        lblHeaderChangeHired = new javax.swing.JLabel();
        lblChooseHired = new javax.swing.JLabel();
        cbListAllHired = new javax.swing.JComboBox<>();
        btnChooseChangeHired = new javax.swing.JButton();
        lblPassword = new javax.swing.JLabel();
        pfPassword = new javax.swing.JPasswordField();
        tfChangeLastNameHired = new javax.swing.JTextField();
        lblChangeLastNameHired = new javax.swing.JLabel();
        pfVerifyPassword = new javax.swing.JPasswordField();
        lblVerifyPassword = new javax.swing.JLabel();
        lblChangeHiredMessage = new javax.swing.JLabel();
        paneRemoveHired = new javax.swing.JPanel();
        lblChooseHiredRemove = new javax.swing.JLabel();
        cbListAllHiredRemove = new javax.swing.JComboBox<>();
        btnRemove = new javax.swing.JButton();
        lblNote = new javax.swing.JLabel();
        lblHeaderRemove = new javax.swing.JLabel();
        paneAddHired = new javax.swing.JPanel();
        lblHeaderAdd = new javax.swing.JLabel();
        lblAddFirstName = new javax.swing.JLabel();
        tfAddFirstName = new javax.swing.JTextField();
        lblAddTelephone = new javax.swing.JLabel();
        tfAddTelephone = new javax.swing.JTextField();
        lblAddMail = new javax.swing.JLabel();
        tfAddMail = new javax.swing.JTextField();
        btnChangeHiredAdd = new javax.swing.JButton();
        lblAddLastName = new javax.swing.JLabel();
        tfAddLastName = new javax.swing.JTextField();
        paneUpdateHired = new javax.swing.JPanel();
        lblChooseGameProject = new javax.swing.JLabel();
        cbListAllGameProjects = new javax.swing.JComboBox<>();
        lblChooseProjectleader = new javax.swing.JLabel();
        cbListAllProjectleaders = new javax.swing.JComboBox<>();
        btnConfirmUpdate = new javax.swing.JButton();
        lblUpdateLeader = new javax.swing.JLabel();
        lblUpdateHiredInProject = new javax.swing.JLabel();
        lblUpdateHiredPosition = new javax.swing.JLabel();
        lblChooseSpecialist = new javax.swing.JLabel();
        cbListAllSpecialists = new javax.swing.JComboBox<>();
        lblChooseGameProjectUpdate = new javax.swing.JLabel();
        cbListAllGameProjectsUpdate = new javax.swing.JComboBox<>();
        btnConfirmUpdateHired = new javax.swing.JButton();
        lblChooseHiredPosition = new javax.swing.JLabel();
        cbListAllHiredPosition = new javax.swing.JComboBox<>();
        lblChooseUpgrade = new javax.swing.JLabel();
        cbHiredForm = new javax.swing.JComboBox<>();
        btnConfirmUpdatePosition = new javax.swing.JButton();
        btnConfirmUpdateRemoved = new javax.swing.JButton();
        lblErrorMessageHiredProjekt = new javax.swing.JLabel();
        lblErrorMessageHiredGP = new javax.swing.JLabel();
        lblErrorMessageHiredUpdate = new javax.swing.JLabel();
        separatorHired = new javax.swing.JSeparator();
        lblFunctionError = new javax.swing.JLabel();
        cbChooseProjectHiredIn = new javax.swing.JComboBox<>();
        paneProject = new javax.swing.JPanel();
        lblHeaderGameProject = new javax.swing.JLabel();
        cbFunctionsGameProject = new javax.swing.JComboBox<>();
        tfsearchFieldGameProject = new javax.swing.JTextField();
        btnSearchGameProject = new javax.swing.JButton();
        spGameProject = new javax.swing.JScrollPane();
        tasearchResultGameProject = new javax.swing.JTextArea();
        lblErrorMessageGameProject = new javax.swing.JLabel();
        tpSubMenuGameProject = new javax.swing.JTabbedPane();
        paneChangeGameProject = new javax.swing.JPanel();
        lblHeaderChangeGameProject = new javax.swing.JLabel();
        lblChooseGame = new javax.swing.JLabel();
        cbListAllGames = new javax.swing.JComboBox<>();
        btnChooseChangeGameProject = new javax.swing.JButton();
        btnChangeGameProject = new javax.swing.JButton();
        tfChangeGpReleaseDate = new javax.swing.JTextField();
        lblGpChangeReleaseDate = new javax.swing.JLabel();
        lblGpChangeStartDate = new javax.swing.JLabel();
        tfChangeGpStartDate = new javax.swing.JTextField();
        tfGpChangeName = new javax.swing.JTextField();
        lblGpChangeName = new javax.swing.JLabel();
        lblStartDateChangeDay = new javax.swing.JLabel();
        cbStartDateChangeDay = new javax.swing.JComboBox<>();
        lblReleaseChangeDay = new javax.swing.JLabel();
        cbReleaseChangeDay = new javax.swing.JComboBox<>();
        cbStartDateChangeMonth = new javax.swing.JComboBox<>();
        cbReleaseChangeMonth = new javax.swing.JComboBox<>();
        lblReleaseChangeMonth = new javax.swing.JLabel();
        lblStartDateChangeMonth = new javax.swing.JLabel();
        tfReleaseChangeYear = new javax.swing.JTextField();
        lblReleaseChangeYear = new javax.swing.JLabel();
        tfStartDateChangeYear = new javax.swing.JTextField();
        lblStartDateChangeYear = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblMessageChangeProject = new javax.swing.JLabel();
        paneAddGameProject = new javax.swing.JPanel();
        lblHeaderAddGameProject = new javax.swing.JLabel();
        lblGpAddName = new javax.swing.JLabel();
        tfGpAddName = new javax.swing.JTextField();
        lblGpAddStartDate = new javax.swing.JLabel();
        lblGpAddReleaseDate = new javax.swing.JLabel();
        btnAddGameProject = new javax.swing.JButton();
        lblAddDay = new javax.swing.JLabel();
        cbStartDateDay = new javax.swing.JComboBox<>();
        lblAddMonth = new javax.swing.JLabel();
        cbStartDateMonth = new javax.swing.JComboBox<>();
        lblDateYear = new javax.swing.JLabel();
        tfStartDateYear = new javax.swing.JTextField();
        lblAddDayRelease = new javax.swing.JLabel();
        cbReleaseDateDay = new javax.swing.JComboBox<>();
        lblAddMonthRelease = new javax.swing.JLabel();
        cbReleaseDateMonth = new javax.swing.JComboBox<>();
        lblDateYearRelease = new javax.swing.JLabel();
        tfReleaseDateYear = new javax.swing.JTextField();
        cbNewProjLeader = new javax.swing.JComboBox<>();
        lblChooseLeaderAddGP = new javax.swing.JLabel();
        lblAddProjectText = new javax.swing.JLabel();
        separatorGameProject = new javax.swing.JSeparator();
        cbAllGameProjects = new javax.swing.JComboBox<>();
        panePlatform = new javax.swing.JPanel();
        spPlatform = new javax.swing.JScrollPane();
        tasearchResultPlatform = new javax.swing.JTextArea();
        btnSearchPlatform = new javax.swing.JButton();
        cbFunctionsPlatform = new javax.swing.JComboBox<>();
        lblHeaderPlatform = new javax.swing.JLabel();
        lblErrorMessagePlatform = new javax.swing.JLabel();
        sepPlatform = new javax.swing.JSeparator();
        lblPlatformUpdateHeader = new javax.swing.JLabel();
        lblChoosePlatform = new javax.swing.JLabel();
        cbListAllPlatforms = new javax.swing.JComboBox<>();
        lblChooseGameProjectPlatform = new javax.swing.JLabel();
        cbListAllGamesPlatform = new javax.swing.JComboBox<>();
        btnConfirmUpdatePlatform = new javax.swing.JButton();
        cbListPlatforms = new javax.swing.JComboBox<>();
        paneCompetence = new javax.swing.JPanel();
        spCompetence = new javax.swing.JScrollPane();
        tasearchResultCompetence = new javax.swing.JTextArea();
        btnSearchCompetence = new javax.swing.JButton();
        cbFunctionsCompetence = new javax.swing.JComboBox<>();
        lblHeaderCompetence = new javax.swing.JLabel();
        lblErrorMessageCompetence = new javax.swing.JLabel();
        cbCompetenceSpecialists = new javax.swing.JComboBox<>();
        sepCompetence = new javax.swing.JSeparator();
        lblCompetenceTitle = new javax.swing.JLabel();
        lblChooseSpecialistChange = new javax.swing.JLabel();
        cbListSpecialistChange = new javax.swing.JComboBox<>();
        lblChooseCompetenceChange = new javax.swing.JLabel();
        cbChooseCompetenceChange = new javax.swing.JComboBox<>();
        btnRemoveCompetence = new javax.swing.JButton();
        btnAddCompetence = new javax.swing.JButton();
        lblChangeLevel = new javax.swing.JLabel();
        btnLevelDownCompetence = new javax.swing.JButton();
        tfCurrentLevelChange = new javax.swing.JTextField();
        btnLevelUpCompetence = new javax.swing.JButton();
        cbChoosePlattformChange = new javax.swing.JComboBox<>();
        lblErrorMessageCompetenceChange = new javax.swing.JLabel();
        lblChoosePlatformChange = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblHeader.setText("Välj funktion:");

        cbFunctions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFunctionsActionPerformed(evt);
            }
        });

        btnSearch.setText("Sök");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tfsearchField.setText("Sök...");

        tasearchResult.setEditable(false);
        tasearchResult.setColumns(20);
        tasearchResult.setRows(5);
        spHired.setViewportView(tasearchResult);

        btnChangeHired.setText("OK");
        btnChangeHired.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeHiredMouseClicked(evt);
            }
        });

        lblChangeMailHired.setText("Mail:");

        tfChangeMailHired.setText("Mailadress");

        tfChangeTelephoneHired.setText("Telefonnummer");

        lblChangeTelephoneHired.setText("Telefon: ");

        lblChangeFirstNameHired.setText("Förnamn:");

        tfChangeFirstNameHired.setText("Förnamn");

        lblHeaderChangeHired.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHeaderChangeHired.setText("Ändra anställd");

        lblChooseHired.setText("Välj en anställd i listan att ändra information om: ");

        btnChooseChangeHired.setText("Välj");
        btnChooseChangeHired.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChooseChangeHiredMouseClicked(evt);
            }
        });

        lblPassword.setText("Lösenord:");

        pfPassword.setText("asda3123b");
        pfPassword.setToolTipText("");

        tfChangeLastNameHired.setText("Efternamn");

        lblChangeLastNameHired.setText("Efternamn:");

        pfVerifyPassword.setText("2iubavwda");

        lblVerifyPassword.setText("Verifiera:");

        lblChangeHiredMessage.setText("aaaa");

        javax.swing.GroupLayout paneChangeHiredLayout = new javax.swing.GroupLayout(paneChangeHired);
        paneChangeHired.setLayout(paneChangeHiredLayout);
        paneChangeHiredLayout.setHorizontalGroup(
            paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneChangeHiredLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblHeaderChangeHired, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblChooseHired)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneChangeHiredLayout.createSequentialGroup()
                            .addComponent(cbListAllHired, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnChooseChangeHired)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paneChangeHiredLayout.createSequentialGroup()
                        .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChangeMailHired)
                            .addComponent(lblChangeTelephoneHired)
                            .addComponent(lblChangeFirstNameHired)
                            .addComponent(lblChangeLastNameHired)
                            .addComponent(lblPassword)
                            .addComponent(lblVerifyPassword))
                        .addGap(26, 26, 26)
                        .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pfVerifyPassword)
                            .addComponent(tfChangeTelephoneHired, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfChangeFirstNameHired, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfChangeMailHired, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfChangeLastNameHired, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pfPassword, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChangeHired)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblChangeHiredMessage)))
                .addContainerGap(482, Short.MAX_VALUE))
        );
        paneChangeHiredLayout.setVerticalGroup(
            paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneChangeHiredLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblHeaderChangeHired, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblChooseHired)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbListAllHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseChangeHired))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfChangeFirstNameHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChangeFirstNameHired))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChangeLastNameHired)
                    .addComponent(tfChangeLastNameHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChangeTelephoneHired)
                    .addComponent(tfChangeTelephoneHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChangeMailHired)
                    .addComponent(tfChangeMailHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneChangeHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pfVerifyPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVerifyPassword)
                    .addComponent(btnChangeHired)
                    .addComponent(lblChangeHiredMessage))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        tpSubMenuHired.addTab("Ändra", paneChangeHired);

        lblChooseHiredRemove.setText("Välj anställd i listan att ta bort ur systemet:");

        btnRemove.setText("Ta bort");
        btnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveMouseClicked(evt);
            }
        });

        lblNote.setText("OBSERVERA! Du kan ej ändra dig när du har tagit bort en anställd");

        lblHeaderRemove.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHeaderRemove.setText("Ta bort anställd");

        javax.swing.GroupLayout paneRemoveHiredLayout = new javax.swing.GroupLayout(paneRemoveHired);
        paneRemoveHired.setLayout(paneRemoveHiredLayout);
        paneRemoveHiredLayout.setHorizontalGroup(
            paneRemoveHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneRemoveHiredLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(paneRemoveHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeaderRemove)
                    .addComponent(lblNote, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paneRemoveHiredLayout.createSequentialGroup()
                        .addGroup(paneRemoveHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblChooseHiredRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbListAllHiredRemove, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paneRemoveHiredLayout.setVerticalGroup(
            paneRemoveHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneRemoveHiredLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblHeaderRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblChooseHiredRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneRemoveHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbListAllHiredRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNote)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tpSubMenuHired.addTab("Ta bort", paneRemoveHired);

        lblHeaderAdd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHeaderAdd.setText("Lägg till anställd");

        lblAddFirstName.setText("Förnamn:");

        tfAddFirstName.setText("Förnamn");

        lblAddTelephone.setText("Telefon: ");

        tfAddTelephone.setText("Telefonnummer");

        lblAddMail.setText("Mail:");

        tfAddMail.setText("Mailadress");

        btnChangeHiredAdd.setText("OK");
        btnChangeHiredAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeHiredAddMouseClicked(evt);
            }
        });

        lblAddLastName.setText("Efternamn:");

        tfAddLastName.setText("Efternamn");

        javax.swing.GroupLayout paneAddHiredLayout = new javax.swing.GroupLayout(paneAddHired);
        paneAddHired.setLayout(paneAddHiredLayout);
        paneAddHiredLayout.setHorizontalGroup(
            paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneAddHiredLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHeaderAdd)
                    .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnChangeHiredAdd, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneAddHiredLayout.createSequentialGroup()
                            .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(paneAddHiredLayout.createSequentialGroup()
                                    .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblAddMail)
                                        .addComponent(lblAddTelephone))
                                    .addGap(33, 33, 33))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paneAddHiredLayout.createSequentialGroup()
                                    .addComponent(lblAddFirstName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tfAddTelephone)
                                .addComponent(tfAddFirstName)
                                .addComponent(tfAddMail, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneAddHiredLayout.createSequentialGroup()
                        .addComponent(lblAddLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfAddLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paneAddHiredLayout.setVerticalGroup(
            paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneAddHiredLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblHeaderAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAddFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddFirstName))
                .addGap(4, 4, 4)
                .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAddLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddTelephone)
                    .addComponent(tfAddTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneAddHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddMail)
                    .addComponent(tfAddMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChangeHiredAdd)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tpSubMenuHired.addTab("Lägg till", paneAddHired);

        lblChooseGameProject.setText("Välj Spelprojekt: ");

        lblChooseProjectleader.setText("Välj projektledare: ");

        btnConfirmUpdate.setText("OK");
        btnConfirmUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfirmUpdateMouseClicked(evt);
            }
        });

        lblUpdateLeader.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUpdateLeader.setText("Uppdatera information om vem som leder ett projekt");

        lblUpdateHiredInProject.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUpdateHiredInProject.setText("Uppdatera information om vilka anställda som arbetar med ett spelprojekt");

        lblUpdateHiredPosition.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUpdateHiredPosition.setText("Uppdatera den anställdes roll (A)");

        lblChooseSpecialist.setText("Välj Specialist: ");

        lblChooseGameProjectUpdate.setText("Välj Spelprojekt: ");

        btnConfirmUpdateHired.setText("Lägg till");
        btnConfirmUpdateHired.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfirmUpdateHiredMouseClicked(evt);
            }
        });

        lblChooseHiredPosition.setText("Välj Anställd: ");

        lblChooseUpgrade.setText("Välj ändring i anställning:");

        cbHiredForm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Specialist", "Projektledare" }));

        btnConfirmUpdatePosition.setText("OK");
        btnConfirmUpdatePosition.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfirmUpdatePositionMouseClicked(evt);
            }
        });

        btnConfirmUpdateRemoved.setText("Ta bort");
        btnConfirmUpdateRemoved.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfirmUpdateRemovedMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout paneUpdateHiredLayout = new javax.swing.GroupLayout(paneUpdateHired);
        paneUpdateHired.setLayout(paneUpdateHiredLayout);
        paneUpdateHiredLayout.setHorizontalGroup(
            paneUpdateHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneUpdateHiredLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(paneUpdateHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneUpdateHiredLayout.createSequentialGroup()
                        .addComponent(lblChooseHiredPosition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbListAllHiredPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblChooseUpgrade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbHiredForm, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfirmUpdatePosition))
                    .addGroup(paneUpdateHiredLayout.createSequentialGroup()
                        .addGroup(paneUpdateHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneUpdateHiredLayout.createSequentialGroup()
                                .addComponent(lblChooseSpecialist)
                                .addGap(18, 18, 18)
                                .addComponent(cbListAllSpecialists, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblChooseGameProjectUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbListAllGameProjectsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(btnConfirmUpdateRemoved)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnConfirmUpdateHired))
                            .addGroup(paneUpdateHiredLayout.createSequentialGroup()
                                .addComponent(lblChooseGameProject)
                                .addGap(18, 18, 18)
                                .addComponent(cbListAllGameProjects, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblChooseProjectleader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbListAllProjectleaders, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnConfirmUpdate))
                            .addComponent(lblUpdateHiredPosition)
                            .addComponent(lblUpdateHiredInProject)
                            .addComponent(lblErrorMessageHiredUpdate)
                            .addComponent(lblErrorMessageHiredGP)
                            .addComponent(lblErrorMessageHiredProjekt)
                            .addComponent(lblUpdateLeader))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneUpdateHiredLayout.setVerticalGroup(
            paneUpdateHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneUpdateHiredLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lblUpdateLeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneUpdateHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChooseGameProject)
                    .addComponent(cbListAllGameProjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChooseProjectleader)
                    .addComponent(cbListAllProjectleaders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirmUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorMessageHiredProjekt)
                .addGap(14, 14, 14)
                .addComponent(lblUpdateHiredInProject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneUpdateHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChooseSpecialist)
                    .addComponent(cbListAllSpecialists, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChooseGameProjectUpdate)
                    .addComponent(cbListAllGameProjectsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirmUpdateHired)
                    .addComponent(btnConfirmUpdateRemoved))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorMessageHiredGP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblUpdateHiredPosition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneUpdateHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChooseHiredPosition)
                    .addComponent(cbListAllHiredPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChooseUpgrade)
                    .addComponent(cbHiredForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirmUpdatePosition))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblErrorMessageHiredUpdate)
                .addGap(60, 60, 60))
        );

        tpSubMenuHired.addTab("Uppdatera", paneUpdateHired);

        lblFunctionError.setText(" ");

        cbChooseProjectHiredIn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", " " }));

        javax.swing.GroupLayout paneHiredLayout = new javax.swing.GroupLayout(paneHired);
        paneHired.setLayout(paneHiredLayout);
        paneHiredLayout.setHorizontalGroup(
            paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneHiredLayout.createSequentialGroup()
                .addGroup(paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneHiredLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFunctionError)
                            .addGroup(paneHiredLayout.createSequentialGroup()
                                .addComponent(lblHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paneHiredLayout.createSequentialGroup()
                                        .addGap(382, 382, 382)
                                        .addComponent(lblErrorMessageHired, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(paneHiredLayout.createSequentialGroup()
                                        .addGroup(paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(spHired, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(paneHiredLayout.createSequentialGroup()
                                                .addComponent(cbFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(tfsearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbChooseProjectHiredIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearch)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(paneHiredLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(separatorHired)
                            .addComponent(tpSubMenuHired))))
                .addContainerGap())
        );
        paneHiredLayout.setVerticalGroup(
            paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneHiredLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpSubMenuHired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorHired, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneHiredLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeader)
                    .addComponent(cbFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(tfsearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbChooseProjectHiredIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spHired, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorMessageHired, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(lblFunctionError)
                .addGap(31, 31, 31))
        );

        tpMenu.addTab("Anställd", paneHired);

        lblHeaderGameProject.setText("Välj funktion:");

        cbFunctionsGameProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFunctionsGameProjectActionPerformed(evt);
            }
        });

        tfsearchFieldGameProject.setText("Sök...");

        btnSearchGameProject.setText("Sök");
        btnSearchGameProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchGameProjectActionPerformed(evt);
            }
        });

        tasearchResultGameProject.setEditable(false);
        tasearchResultGameProject.setColumns(20);
        tasearchResultGameProject.setRows(5);
        spGameProject.setViewportView(tasearchResultGameProject);

        lblHeaderChangeGameProject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHeaderChangeGameProject.setText("Ändra spelprojekt");

        lblChooseGame.setText("Välj ett spel i listan att ändra information om: ");

        btnChooseChangeGameProject.setText("Välj");
        btnChooseChangeGameProject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChooseChangeGameProjectMouseClicked(evt);
            }
        });

        btnChangeGameProject.setText("OK");
        btnChangeGameProject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeGameProjectMouseClicked(evt);
            }
        });

        tfChangeGpReleaseDate.setEditable(false);
        tfChangeGpReleaseDate.setText("ÅÅÅÅ.MM.DD");

        lblGpChangeReleaseDate.setText("Releasedatum:");

        lblGpChangeStartDate.setText("Startdatum:");

        tfChangeGpStartDate.setEditable(false);
        tfChangeGpStartDate.setText("ÅÅÅÅ.MM.DD");

        tfGpChangeName.setText("Namn");

        lblGpChangeName.setText("Beteckning:");

        lblStartDateChangeDay.setText("Dag:");

        cbStartDateChangeDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        lblReleaseChangeDay.setText("Dag:");

        cbReleaseChangeDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        cbStartDateChangeMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        cbReleaseChangeMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        lblReleaseChangeMonth.setText("Månad:");

        lblStartDateChangeMonth.setText("Månad:");

        tfReleaseChangeYear.setText("ÅÅÅÅ");

        lblReleaseChangeYear.setText("År:");

        tfStartDateChangeYear.setText("ÅÅÅÅ");

        lblStartDateChangeYear.setText("År:");

        lblMessageChangeProject.setText("lblMessageChangeProject");

        javax.swing.GroupLayout paneChangeGameProjectLayout = new javax.swing.GroupLayout(paneChangeGameProject);
        paneChangeGameProject.setLayout(paneChangeGameProjectLayout);
        paneChangeGameProjectLayout.setHorizontalGroup(
            paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                        .addComponent(lblHeaderChangeGameProject)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(cbListAllGames, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(btnChooseChangeGameProject))
                            .addComponent(lblChooseGame))
                        .addGap(18, 18, 18)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(lblGpChangeName)
                                .addGap(34, 34, 34)
                                .addComponent(tfGpChangeName, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneChangeGameProjectLayout.createSequentialGroup()
                                        .addComponent(lblGpChangeReleaseDate)
                                        .addGap(18, 18, 18))
                                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(lblGpChangeStartDate)
                                        .addGap(30, 30, 30)))
                                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tfChangeGpStartDate)
                                    .addComponent(tfChangeGpReleaseDate, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))))
                        .addContainerGap(313, Short.MAX_VALUE))))
            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMessageChangeProject)
                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(lblStartDateChangeYear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tfStartDateChangeYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(lblReleaseChangeYear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfReleaseChangeYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(lblReleaseChangeMonth)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbReleaseChangeMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(lblStartDateChangeMonth)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbStartDateChangeMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(6, 6, 6)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(lblStartDateChangeDay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbStartDateChangeDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(lblReleaseChangeDay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnChangeGameProject)
                                    .addComponent(cbReleaseChangeDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(455, Short.MAX_VALUE))
        );
        paneChangeGameProjectLayout.setVerticalGroup(
            paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                        .addComponent(lblHeaderChangeGameProject)
                        .addGap(3, 3, 3)
                        .addComponent(lblChooseGame)
                        .addGap(11, 11, 11)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                                .addComponent(cbListAllGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filler1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filler2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnChooseChangeGameProject))
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneChangeGameProjectLayout.createSequentialGroup()
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblGpChangeName)
                            .addComponent(tfGpChangeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGpChangeStartDate)
                            .addComponent(tfChangeGpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGpChangeReleaseDate)
                            .addComponent(tfChangeGpReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStartDateChangeYear)
                            .addComponent(tfStartDateChangeYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblReleaseChangeYear)
                            .addComponent(tfReleaseChangeYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblReleaseChangeMonth)))
                    .addGroup(paneChangeGameProjectLayout.createSequentialGroup()
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblStartDateChangeDay)
                                .addComponent(cbStartDateChangeDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblStartDateChangeMonth)
                                .addComponent(cbStartDateChangeMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(paneChangeGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblReleaseChangeDay)
                            .addComponent(cbReleaseChangeDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbReleaseChangeMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChangeGameProject)
                .addGap(1, 1, 1)
                .addComponent(lblMessageChangeProject)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        tpSubMenuGameProject.addTab("Ändra", paneChangeGameProject);

        lblHeaderAddGameProject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHeaderAddGameProject.setText("Lägg till ett nytt projekt");

        lblGpAddName.setText("Beteckning:");

        tfGpAddName.setText("Namn");

        lblGpAddStartDate.setText("Startdatum:");

        lblGpAddReleaseDate.setText("Releasedatum:");

        btnAddGameProject.setText("OK");
        btnAddGameProject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddGameProjectMouseClicked(evt);
            }
        });

        lblAddDay.setText("Dag:");

        cbStartDateDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        lblAddMonth.setText("Månad:");

        cbStartDateMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        lblDateYear.setText("År:");

        tfStartDateYear.setText("ÅÅÅÅ");

        lblAddDayRelease.setText("Dag:");

        cbReleaseDateDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        lblAddMonthRelease.setText("Månad:");

        cbReleaseDateMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        lblDateYearRelease.setText("År:");

        tfReleaseDateYear.setText("ÅÅÅÅ");

        lblChooseLeaderAddGP.setText("Välj projektledare:");

        javax.swing.GroupLayout paneAddGameProjectLayout = new javax.swing.GroupLayout(paneAddGameProject);
        paneAddGameProject.setLayout(paneAddGameProjectLayout);
        paneAddGameProjectLayout.setHorizontalGroup(
            paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneAddGameProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeaderAddGameProject, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paneAddGameProjectLayout.createSequentialGroup()
                        .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGpAddName)
                            .addComponent(lblGpAddReleaseDate)
                            .addComponent(lblGpAddStartDate)
                            .addComponent(lblChooseLeaderAddGP))
                        .addGap(26, 26, 26)
                        .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfGpAddName, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddDay)
                            .addGroup(paneAddGameProjectLayout.createSequentialGroup()
                                .addComponent(lblAddDayRelease)
                                .addGap(39, 39, 39)
                                .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paneAddGameProjectLayout.createSequentialGroup()
                                        .addComponent(cbReleaseDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblAddMonthRelease)
                                        .addGap(36, 36, 36)
                                        .addComponent(cbReleaseDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(51, 51, 51)
                                        .addComponent(lblDateYearRelease)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfReleaseDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(paneAddGameProjectLayout.createSequentialGroup()
                                        .addComponent(cbStartDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(paneAddGameProjectLayout.createSequentialGroup()
                                                .addComponent(lblAddMonth)
                                                .addGap(36, 36, 36)
                                                .addComponent(cbStartDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lblAddProjectText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(51, 51, 51)
                                        .addComponent(lblDateYear)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfStartDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(paneAddGameProjectLayout.createSequentialGroup()
                                .addComponent(cbNewProjLeader, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(101, 101, 101)
                                .addComponent(btnAddGameProject)))))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        paneAddGameProjectLayout.setVerticalGroup(
            paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneAddGameProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeaderAddGameProject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfGpAddName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGpAddName))
                .addGap(8, 8, 8)
                .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGpAddStartDate)
                    .addComponent(lblAddDay)
                    .addComponent(cbStartDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddMonth)
                    .addComponent(cbStartDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateYear)
                    .addComponent(tfStartDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGpAddReleaseDate)
                    .addComponent(lblAddDayRelease)
                    .addComponent(cbReleaseDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddMonthRelease)
                    .addComponent(cbReleaseDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateYearRelease)
                    .addComponent(tfReleaseDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddGameProject)
                    .addGroup(paneAddGameProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblChooseLeaderAddGP)
                        .addComponent(cbNewProjLeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(lblAddProjectText)
                .addGap(115, 115, 115))
        );

        tpSubMenuGameProject.addTab("Lägg till", paneAddGameProject);

        javax.swing.GroupLayout paneProjectLayout = new javax.swing.GroupLayout(paneProject);
        paneProject.setLayout(paneProjectLayout);
        paneProjectLayout.setHorizontalGroup(
            paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneProjectLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblHeaderGameProject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneProjectLayout.createSequentialGroup()
                        .addComponent(cbFunctionsGameProject, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfsearchFieldGameProject, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spGameProject))
                .addGap(10, 10, 10)
                .addComponent(cbAllGameProjects, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchGameProject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorMessageGameProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21))
            .addGroup(paneProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tpSubMenuGameProject)
                    .addComponent(separatorGameProject))
                .addContainerGap())
        );
        paneProjectLayout.setVerticalGroup(
            paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpSubMenuGameProject)
                .addGap(10, 10, 10)
                .addComponent(separatorGameProject, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHeaderGameProject)
                            .addComponent(cbFunctionsGameProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfsearchFieldGameProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblErrorMessageGameProject, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                    .addGroup(paneProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearchGameProject)
                        .addComponent(cbAllGameProjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spGameProject, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        tpMenu.addTab("Spelprojekt", paneProject);

        tasearchResultPlatform.setEditable(false);
        tasearchResultPlatform.setColumns(20);
        tasearchResultPlatform.setRows(5);
        spPlatform.setViewportView(tasearchResultPlatform);

        btnSearchPlatform.setText("Sök");
        btnSearchPlatform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPlatformActionPerformed(evt);
            }
        });

        cbFunctionsPlatform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFunctionsPlatformActionPerformed(evt);
            }
        });

        lblHeaderPlatform.setText("Välj funktion:");

        lblPlatformUpdateHeader.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPlatformUpdateHeader.setText("Uppdatera plattform");

        lblChoosePlatform.setText("Välj plattform: ");

        lblChooseGameProjectPlatform.setText("Välj spelprojekt: ");

        btnConfirmUpdatePlatform.setText("OK");
        btnConfirmUpdatePlatform.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConfirmUpdatePlatformMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panePlatformLayout = new javax.swing.GroupLayout(panePlatform);
        panePlatform.setLayout(panePlatformLayout);
        panePlatformLayout.setHorizontalGroup(
            panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePlatformLayout.createSequentialGroup()
                .addGroup(panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panePlatformLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sepPlatform))
                    .addGroup(panePlatformLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lblChoosePlatform)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbListAllPlatforms, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblChooseGameProjectPlatform)
                        .addGap(18, 18, 18)
                        .addComponent(cbListAllGamesPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnConfirmUpdatePlatform)
                        .addGap(42, 42, 42)
                        .addComponent(lblErrorMessagePlatform, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                    .addGroup(panePlatformLayout.createSequentialGroup()
                        .addGroup(panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panePlatformLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(lblHeaderPlatform)
                                .addGap(18, 18, 18)
                                .addGroup(panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panePlatformLayout.createSequentialGroup()
                                        .addComponent(cbFunctionsPlatform, 0, 291, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbListPlatforms, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(spPlatform))
                                .addGap(38, 38, 38)
                                .addComponent(btnSearchPlatform))
                            .addGroup(panePlatformLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(lblPlatformUpdateHeader)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panePlatformLayout.setVerticalGroup(
            panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePlatformLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblPlatformUpdateHeader)
                .addGap(16, 16, 16)
                .addGroup(panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panePlatformLayout.createSequentialGroup()
                        .addGroup(panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChoosePlatform)
                            .addComponent(cbListAllPlatforms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChooseGameProjectPlatform)
                            .addComponent(cbListAllGamesPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConfirmUpdatePlatform))
                        .addGap(19, 19, 19)
                        .addComponent(sepPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panePlatformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHeaderPlatform)
                            .addComponent(cbFunctionsPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchPlatform)
                            .addComponent(cbListPlatforms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblErrorMessagePlatform, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(spPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
        );

        tpMenu.addTab("Plattform", panePlatform);

        tasearchResultCompetence.setEditable(false);
        tasearchResultCompetence.setColumns(20);
        tasearchResultCompetence.setRows(5);
        spCompetence.setViewportView(tasearchResultCompetence);

        btnSearchCompetence.setText("Sök");
        btnSearchCompetence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCompetenceActionPerformed(evt);
            }
        });

        cbFunctionsCompetence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFunctionsCompetenceActionPerformed(evt);
            }
        });

        lblHeaderCompetence.setText("Välj funktion:");

        lblCompetenceTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblCompetenceTitle.setText("Ändra kompetens för en specialist");

        lblChooseSpecialistChange.setText("Välj specialist:");

        cbListSpecialistChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbListSpecialistChangeActionPerformed(evt);
            }
        });

        lblChooseCompetenceChange.setText("Välj kompetens:");

        cbChooseCompetenceChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbChooseCompetenceChangeActionPerformed(evt);
            }
        });

        btnRemoveCompetence.setText("Ta bort");
        btnRemoveCompetence.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveCompetenceMouseClicked(evt);
            }
        });

        btnAddCompetence.setText("Lägg till");
        btnAddCompetence.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddCompetenceMouseClicked(evt);
            }
        });

        lblChangeLevel.setText("Ändra level:");

        btnLevelDownCompetence.setText("-");
        btnLevelDownCompetence.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLevelDownCompetenceMouseClicked(evt);
            }
        });

        tfCurrentLevelChange.setEditable(false);

        btnLevelUpCompetence.setText("+");
        btnLevelUpCompetence.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLevelUpCompetenceMouseClicked(evt);
            }
        });

        cbChoosePlattformChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbChoosePlattformChangeActionPerformed(evt);
            }
        });

        lblChoosePlatformChange.setText("Välj plattform:");

        javax.swing.GroupLayout paneCompetenceLayout = new javax.swing.GroupLayout(paneCompetence);
        paneCompetence.setLayout(paneCompetenceLayout);
        paneCompetenceLayout.setHorizontalGroup(
            paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneCompetenceLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneCompetenceLayout.createSequentialGroup()
                        .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneCompetenceLayout.createSequentialGroup()
                                .addComponent(btnLevelDownCompetence)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfCurrentLevelChange, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLevelUpCompetence))
                            .addComponent(lblChangeLevel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(paneCompetenceLayout.createSequentialGroup()
                        .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCompetenceTitle)
                            .addGroup(paneCompetenceLayout.createSequentialGroup()
                                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChooseSpecialistChange)
                                    .addComponent(cbListSpecialistChange, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)
                                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblChooseCompetenceChange)
                                    .addComponent(cbChooseCompetenceChange, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneCompetenceLayout.createSequentialGroup()
                                .addComponent(lblChoosePlatformChange)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneCompetenceLayout.createSequentialGroup()
                                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(paneCompetenceLayout.createSequentialGroup()
                                        .addComponent(cbChoosePlattformChange, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnRemoveCompetence)
                                        .addGap(14, 14, 14)
                                        .addComponent(btnAddCompetence)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblErrorMessageCompetenceChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(lblErrorMessageCompetence, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                                .addGap(31, 31, 31))))))
            .addGroup(paneCompetenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sepCompetence)
                .addContainerGap())
            .addGroup(paneCompetenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeaderCompetence)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneCompetenceLayout.createSequentialGroup()
                        .addComponent(cbFunctionsCompetence, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbCompetenceSpecialists, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchCompetence))
                    .addComponent(spCompetence))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paneCompetenceLayout.setVerticalGroup(
            paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneCompetenceLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblErrorMessageCompetence, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCompetenceTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChooseSpecialistChange)
                    .addComponent(lblChooseCompetenceChange)
                    .addComponent(lblChoosePlatformChange))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbListSpecialistChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbChooseCompetenceChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRemoveCompetence)
                        .addComponent(btnAddCompetence)
                        .addComponent(cbChoosePlattformChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblErrorMessageCompetenceChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(lblChangeLevel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLevelDownCompetence)
                    .addComponent(tfCurrentLevelChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLevelUpCompetence))
                .addGap(18, 18, 18)
                .addComponent(sepCompetence, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(paneCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeaderCompetence)
                    .addComponent(cbFunctionsCompetence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchCompetence)
                    .addComponent(cbCompetenceSpecialists, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spCompetence, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        tpMenu.addTab("Kompetensdomän", paneCompetence);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpMenu)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpMenu)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * A method for looking through and choosing which method too use in the combo box
     * @param evt 
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try
        {
            String selectedFunction = cbFunctions.getSelectedItem().toString();
                   
            switch (selectedFunction)
            {
                case "Sök anställd i ett projekt" :
                    listHired();
                    hideHiredChangeFields();
                    break;
                case "Sök anställd som leder projekt":
                    listProjects();
                    hideHiredChangeFields();
                    break;
                    case "Lista anställda som arbetar med ett projekt":
                    hideHiredChangeFields();
                    listHiredInProjects();
                    updateCBs();
                    tpSubMenuHired.setSelectedIndex(0);
                    break;
                case "Ändra information om en anställd":
                    showHiredChangeFields();
                    updateCBs();
                    tpSubMenuHired.setSelectedIndex(0);
                    break;
                case "Ta bort anställd" :
                    showHiredRemoveFields();
                    tpSubMenuHired.setSelectedIndex(1);
                    break;
                case "Lägg till ny anställd" :
                    showHiredAddFields();
                    tpSubMenuHired.setSelectedIndex(2);
                    break;
                case "Uppdatera anställd" : 
                    showHiredUpdateFields();
                    updateCBs();
                    tpSubMenuHired.setSelectedIndex(3);
                    break;       
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
    *Adds all leaders to a combo box.
    */
    public void addProjectleadersToCB()
    {
        try
        {	
            ArrayList<HashMap<String, String>> allLeaders = database.listAllLeaders();
            for (int i = 0; i < allLeaders.size(); i++)
            {
                String aid = allLeaders.get(i).get("AID");
                String name = allLeaders.get(i).get("NAMN");
                cbListAllProjectleaders.addItem(aid + ", " + name);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsHired.
     */
    public void initAdminFunctionsHired()
    {
        try
        {
            cbFunctions.addItem("Ändra information om en anställd");
            cbFunctions.addItem("Ta bort anställd");
            cbFunctions.addItem("Lägg till ny anställd");
            cbFunctions.addItem("Uppdatera anställd");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsHired.
     */
    public void initHiredFunctionsHired()
    {
        try
        {
            cbFunctions.addItem("Sök anställd som leder projekt");
            cbFunctions.addItem("Sök anställd i ett projekt");
            cbFunctions.addItem("Lista anställda som arbetar med ett projekt");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsGP.
     */
    public void initAdminFunctionsGameProject ()
    {
        try
        {
            cbFunctionsGameProject.addItem("Lägg till spelutvecklingsprojekt");
            cbFunctionsGameProject.addItem("Uppdatera information om ett specifikt projekt");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsGP.
     */
    public void initHiredFunctionsGameProject ()
    {
        try
        {
            cbFunctionsGameProject.addItem("Lista de spelprojekt som har släppts");
            cbFunctionsGameProject.addItem("Lista de spelprojekt som är under utveckling");
            cbFunctionsGameProject.addItem("Visa vilka plattformar ett spel utvecklas till");
            cbFunctionsGameProject.addItem("Visa vem som leder/har lett ett specifikt projekt");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsPlatform.
     */
    public void initAdminFunctionsPlatform ()
    {
        try
        {
            cbFunctionsPlatform.addItem("Uppdatera information om vilka plattformar ett spelprojekt omfattar");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsPlatform.
     */
    public void initHiredFunctionsPlatform ()
    {
        try
        {
            cbFunctionsPlatform.addItem("Lista de spel som har släppts till plattformen");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsCompetence.
     */
    public void initAdminFunctionsCompetence ()
    {
        try
        {
            cbFunctionsCompetence.addItem("Uppdatera information om vilka domäner en specialist har kompetens för");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Set the access on FunctionsCompetence.
     */
    public void initHiredFunctionsCompetence ()
    {
        try
        {
            cbFunctionsCompetence.addItem("Lista den kompetens en specifik specialist har");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * button for the remove-hired-function.
     */
    private void btnRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveMouseClicked
        try
        {
            String currentHired = cbListAllHiredRemove.getSelectedItem().toString();
            String deleteAID = (currentHired.split(",")[0]);
            removeHired(deleteAID);
            updateCBs();
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnRemoveMouseClicked

    /**
     * lets u delete a hired person.
     * @param deleteAID 
     */
    private void removeHired (String deleteAID)
    {
        lblErrorMessageHired.setText("");
        try
        {
            database.deleteHired(deleteAID);
            lblErrorMessageHired.setText("Den anställda är nu borttagen");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }          
    
    /**
     * Adds items to a combo box.
     */
    private void listHiredToCBRemove()
    {
        try
        {
            //Fetches the names of all of the staff, and holds all info in a cb.
            ArrayList<HashMap<String, String>> allHired = database.listAllHired();
            for (int i = 0; i < allHired.size(); i++)
            {
                String aid = allHired.get(i).get("AID");
                String name = allHired.get(i).get("NAMN");
                cbListAllHiredRemove.addItem(aid + ", " + name);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Update all the combo boxes, so that the latest changes always are showing.
     */
    public void updateCBs ()
    {
        try
        {
            cbListAllHiredRemove.removeAllItems();
            listHiredToCBRemove();
            cbListAllProjectleaders.removeAllItems();
            addProjectleadersToCB();
            cbListAllGameProjects.removeAllItems();
            addProjectsToCB();
            cbListAllHired.removeAllItems();
            addHiredToCB();
            cbListAllHiredPosition.removeAllItems();
            addHiredPosition();
            cbAllGameProjects.removeAllItems();
            addGameProjectsToCB();
            cbListAllPlatforms.removeAllItems();
            addPlatformsToUpdateCB();
            cbListPlatforms.removeAllItems();
            addPlatformsToCB();
            cbListAllGamesPlatform.removeAllItems();
            addGamesPlatformToCB();
            cbNewProjLeader.removeAllItems();
            addLeadersToCbNewProjLeader();
            cbListAllGames.removeAllItems();
            addGamesToCB();
            cbCompetenceSpecialists.removeAllItems();
            addSpecialistsToCBCompetence();
            cbChooseCompetenceChange.removeAllItems();
            addCompetenceToCB();
            cbListSpecialistChange.removeAllItems();
            addSpecialistsToCBCompetenceChange();
            cbChoosePlattformChange.removeAllItems();
            addPlatformsToCBChange();
            cbListAllGameProjectsUpdate.removeAllItems();
            addProjectsToCBUpdate();
            cbListAllSpecialists.removeAllItems();
            addSpecialistToCBUpdate();
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Button for confirming an update of an employee.
     * @param evt 
     */
    private void btnConfirmUpdateHiredMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfirmUpdateHiredMouseClicked
        try
        {
            // Update a specialist to show a new project said specialist is working on. 
            String specialist = cbListAllSpecialists.getSelectedItem().toString();
            int aid = Integer.parseInt(specialist.split(",")[0]);
            String project = cbListAllGameProjectsUpdate.getSelectedItem().toString();
            int sid = Integer.parseInt(project.split(",")[0]);
            String name =specialist.split(",")[1];
            lblErrorMessageHiredGP.setText("");
            boolean performed = database.updateSpecialistProject(aid, sid);
           
            if (performed)
            {
                
                lblErrorMessageHiredGP.setText("");
                lblErrorMessageHiredGP.setText(name + " arbetar nu med projektet "+cbListAllGameProjectsUpdate.getSelectedItem().toString()+".");
            }
            else
            {
                lblErrorMessageHiredGP.setText(name + " kunde inte läggas till i projektet. Kontrollera så personen inte redan jobbar i det aktuella projektet.");
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnConfirmUpdateHiredMouseClicked

    /**
     * Button for confirming an remove of an employee.
     * @param evt 
     */
    private void btnConfirmUpdateRemovedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfirmUpdateRemovedMouseClicked
        try
        {
            // Update a specialist to show a project that the specialist is no longer
            //working on.
            String specialist = cbListAllSpecialists.getSelectedItem().toString();
            int aid = Integer.parseInt(specialist.split(",")[0]);
            String name =specialist.split(",")[1];
            String project = cbListAllGameProjectsUpdate.getSelectedItem().toString();
            int sid = Integer.parseInt(project.split(",")[0]);
            String gameName = project.split(",")[1];
            ArrayList<HashMap<String, String>> projects = database.listHiredInProject(name);
            
            boolean deletePreformed = false;
            for(int i = 0; i < projects.size(); i++)
            {
                String currentDescription = projects.get(i).get("BETECKNING");
                if(gameName.equals(currentDescription)){
                    database.deleteSpecialistProject(aid, sid);
                    deletePreformed = true;
                }
            }
            
            if (deletePreformed)
            {
                lblErrorMessageHiredGP.setText("");
                lblErrorMessageHiredGP.setText(name + " är borttagen från projektet "+cbListAllGameProjectsUpdate.getSelectedItem().toString()+".");
            }
            else
            {
                lblErrorMessageHiredGP.setText(name + " kunde inte tas bort från projektet. Kontrollera så personen jobbar i det aktuella projektet.");
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnConfirmUpdateRemovedMouseClicked

    /**
     * Button that changes/adds an employee.
     * @param evt 
     */
    private void btnChangeHiredAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeHiredAddMouseClicked
        try
        {
            //add a hired person
            addNewHired();
            updateCBs();
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnChangeHiredAddMouseClicked

    /**
    *Button for confirming an update of an employee. 
    * @param evt 
    */
    private void btnConfirmUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfirmUpdateMouseClicked
        try
        {
            updateHired();
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnConfirmUpdateMouseClicked

    /**
     * Button for confirming an employmentform.
     * @param evt 
     */
    private void btnConfirmUpdatePositionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfirmUpdatePositionMouseClicked
        try
        {
            //update the employee's employment-form
            updateHiredForm();
            updateCBs();
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnConfirmUpdatePositionMouseClicked

    /**
     * Event on mouse click that sets the chosen one that you want to update information about
     * @param evt 
     */
    private void btnChooseChangeHiredMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChooseChangeHiredMouseClicked
        try
        {
            lblChangeHiredMessage.setText("");
            tfChangeFirstNameHired.setText("");
            tfChangeLastNameHired.setText("");
            tfChangeTelephoneHired.setText("");
            tfChangeMailHired.setText("");    
                    
            String currentHired = cbListAllHired.getSelectedItem().toString();
            int aid = Integer.parseInt(currentHired.split(",")[0]);
            //populate textfields with existing data
            HashMap<String, String> hired = database.listHired(aid);
            String existingName = hired.get("NAMN");
            tfChangeFirstNameHired.setText(existingName.split(" ")[0]);
            tfChangeLastNameHired.setText(existingName.split(" ")[1]);

            String phone = hired.get("TELEFON");
            tfChangeTelephoneHired.setText(phone);
            String mail = hired.get("MAIL");
            tfChangeMailHired.setText(mail);
            boolean admin = isAdmin(aid);

            //if the person choosen in the combobox is admin shows/hides the comboxes
            if (!admin)
            {
                lblPassword.setVisible(false);
                pfPassword.setVisible(false);
                lblVerifyPassword.setVisible(false);
                pfVerifyPassword.setVisible(false);
            }
            else
            {
                lblPassword.setVisible(true);
                pfPassword.setVisible(true);
                lblVerifyPassword.setVisible(true);
                pfVerifyPassword.setVisible(true);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnChooseChangeHiredMouseClicked

    /**
     * Event on mouse click that lets you set the new information about a hired one. 
     * @param evt 
     */
    private void btnChangeHiredMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeHiredMouseClicked
        lblChangeHiredMessage.setText("");
        try
        {
            String password1 = new String(pfPassword.getPassword());
            String password2 = new String(pfVerifyPassword.getPassword());
            
            if (isAdmin == true)
            {
               if (password1.equals(password2))
                {
                    String currentHired = cbListAllHired.getSelectedItem().toString();
                    int aid = Integer.parseInt(currentHired.split(",")[0]);
                    changeInfoAboutHired(aid);
                    lblChangeHiredMessage.setText("Ändringar genomförda.");
                } 
            }
            else if (isAdmin == false)
            {
                String currentHired = cbListAllHired.getSelectedItem().toString();
                int aid = Integer.parseInt(currentHired.split(",")[0]);
                changeInfoAboutHired(aid);
                lblChangeHiredMessage.setText("Ändringar genomförda.");
            }
            else
            {
                lblChangeHiredMessage.setText("Lösenorden stämmer inte.");
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnChangeHiredMouseClicked

    /**
     * Event on a combo box that fixes changes between different fields and buttons etc.
     * @param evt 
     */
    private void cbFunctionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFunctionsActionPerformed
        try
        {
            String selectedText = cbFunctions.getSelectedItem().toString();
            if (selectedText.equals("Sök anställd som leder projekt"))
            {
                cbChooseProjectHiredIn.setVisible(false);
                tfsearchField.setVisible(true);
                btnSearch.setText("OK");
            }    
            else if (selectedText.equals("Sök anställd i ett projekt"))
            {
                cbChooseProjectHiredIn.setVisible(false);
                tfsearchField.setVisible(true);
                tfsearchField.setText("Sök anställd");
                btnSearch.setText("OK");
            }
            else if (selectedText.equals("Lista anställda som arbetar med ett projekt"))
            {
             cbChooseProjectHiredIn.removeAllItems();   
             addProjectsToCBChooseProjectHiredIn();
             cbChooseProjectHiredIn.setVisible(true);
             tfsearchField.setVisible(false);
            }    
            else
            {
                cbChooseProjectHiredIn.setVisible(false);
                tfsearchField.setVisible(false);
                btnSearch.setText("Gå");
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_cbFunctionsActionPerformed

    /**
     * Button for choosing what action to perform in the game project-tab.
     * @param evt 
     */
    private void btnSearchGameProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchGameProjectActionPerformed
        try
        {
            lblErrorMessageGameProject.setText("");
            String selectedFunction = cbFunctionsGameProject.getSelectedItem().toString();
               
            switch (selectedFunction)
            {
            case "Visa vem som leder/har lett ett specifikt projekt" :
                showLeader();
                updateCBs();
                break;
            case "Visa vilka plattformar ett spel utvecklas till":
                listPlatforms();
                break;  
             case "Lista de spelprojekt som är under utveckling":
                updateCBs();
                tasearchResultGameProject.setText("");
                listProjectsUnderDevelopment();
                break;
            case "Lista de spelprojekt som har släppts" :
                updateCBs();
                tasearchResultGameProject.setText("");
                listReleases(); 
                break;
            case "Lägg till spelutvecklingsprojekt" :
                showGpAddFields();
                updateCBs();
                tpSubMenuGameProject.setSelectedIndex(1);
                break;
            case "Uppdatera information om ett specifikt projekt" : 
                showGpChangeFields();
                tpSubMenuGameProject.setSelectedIndex(0);
                addGamesToCB();
                updateCBs();
                break;       
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnSearchGameProjectActionPerformed

   
    /**
     * Event on a combo box that decides different settings based on which function that is chosen one.
     * @param evt 
     */
    private void cbFunctionsPlatformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFunctionsPlatformActionPerformed
        
        try
        {
            String selectedFunction = cbFunctionsPlatform.getSelectedItem().toString();
               
            switch (selectedFunction)
            {
                case "Lista de spel som har släppts till plattformen" :
                    cbListPlatforms.setVisible(true);
                    btnSearchPlatform.setText("OK");
                    hidePlatformUpdateFields();
                    addPlatformsToCB();
                    break;
                case "Uppdatera information om vilka plattformar ett spelprojekt omfattar" :
                    cbListPlatforms.setVisible(false);
                    btnSearchPlatform.setText("Gå");
                    break;
            }    
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_cbFunctionsPlatformActionPerformed

    /**
     * Button that shows what different actions you can perform on the platform-tab.
     * @param evt 
     */
    private void btnSearchPlatformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPlatformActionPerformed
        try
        {
            String selectedFunction = cbFunctionsPlatform.getSelectedItem().toString();
               
            switch (selectedFunction)
            {
                case "Uppdatera information om vilka plattformar ett spelprojekt omfattar" :
                    showPlatformUpdateFields();
                    addPlatformsToUpdateCB();
                    addGamesPlatformToCB();
                    updateCBs();
                    break;
                case "Lista de spel som har släppts till plattformen" :
                    hidePlatformUpdateFields();
                    listGameForPlatform();
                    updateCBs();
                    break;
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnSearchPlatformActionPerformed

    /**
     * Button for confirming an update for the platform.
     * @param evt 
     */
    private void btnConfirmUpdatePlatformMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfirmUpdatePlatformMouseClicked
        try
        {
            updatePlatformGame();
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnConfirmUpdatePlatformMouseClicked

    /**
     * Button for adding a new game project.
     * @param evt 
     */
    private void btnAddGameProjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddGameProjectMouseClicked
        try
        {
            //Lägg till nytt spelprojekt.
            addNewProject();
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnAddGameProjectMouseClicked

    /**
     * Button for choosing what action to perform on the competence-tab.
     * @param evt 
     */
    private void btnSearchCompetenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCompetenceActionPerformed
        try
        {
            String selectedFunction = cbFunctionsCompetence.getSelectedItem().toString();
               
            switch (selectedFunction)
            {
                case "Uppdatera information om vilka domäner en specialist har kompetens för" :
                    showCompetenceUpdate();
                    updateCBs();
                    break;

                case "Lista den kompetens en specifik specialist har" :
                    tasearchResultCompetence.setText("");
                    listSpecialistCompetence();
                    updateCBs();
                    hideCompetenceUpdate();
                    break;
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnSearchCompetenceActionPerformed

   
    /**
     * Event for deciding different changes based on different functions.
     * @param evt 
     */
    private void cbFunctionsGameProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFunctionsGameProjectActionPerformed
        //changes the btn text based on what action is selected and hides/shows the search-field
        String selectedFunction = cbFunctionsGameProject.getSelectedItem().toString();
        
        switch (selectedFunction)
        {
            case "Visa vem som leder/har lett ett specifikt projekt" :
                tfsearchFieldGameProject.setVisible(false);
                btnSearchGameProject.setText("OK");
                cbAllGameProjects.setVisible(true);
                addGameProjectsToCB();
                break;
            case "Visa vilka plattformar ett spel utvecklas till" :
                tfsearchFieldGameProject.setVisible(true);
                tfsearchFieldGameProject.setText("Sök spel..");
                btnSearchGameProject.setText("OK");
                cbAllGameProjects.setVisible(false);
                break;
            case "Lista de spelprojekt som är under utveckling" :
                tfsearchFieldGameProject.setVisible(false);
                btnSearchGameProject.setText("OK");
                cbAllGameProjects.setVisible(false);
                break;
            case "Lista de spelprojekt som har släppts" :
                tfsearchFieldGameProject.setVisible(false);
                btnSearchGameProject.setText("OK");
                cbAllGameProjects.setVisible(false);
                break;
            case "Lägg till spelutvecklingsprojekt" :
                tfsearchFieldGameProject.setVisible(false);
                btnSearchGameProject.setText("Gå");
                cbAllGameProjects.setVisible(false);
                break;
            case "Uppdatera information om ett specifikt projekt" :
                tfsearchFieldGameProject.setVisible(false);
                btnSearchGameProject.setText("Gå");
                cbAllGameProjects.setVisible(false);
                break;
        }                                     
    }//GEN-LAST:event_cbFunctionsGameProjectActionPerformed

    /**
     * Button for adding a new competence.
     * @param evt 
     */
    private void btnAddCompetenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddCompetenceMouseClicked
          
            //Get specialist name and competence name.
            String name = cbListSpecialistChange.getSelectedItem().toString();
            String benamning = cbChooseCompetenceChange.getSelectedItem().toString();
            String plattform = cbChoosePlattformChange.getSelectedItem().toString();
            //Get AID, KID and PID from names.
            String aid = database.getAidFromSpecialist(name);
            String kid = database.getKidFromCompetenceName(benamning);
            String pid = database.getPidFromPlattformName(plattform);
            
        try
        {  
            if (tfCurrentLevelChange.getText().equals(""))
            {
                database.addCompetenceLevel(aid, kid, pid);
                getCompetenceLevel(name, benamning, plattform);
                lblErrorMessageCompetenceChange.setText(benamning + " inom " + plattform + " är nu tillagd för "+ name + ".");
            }
            else
            {
                lblErrorMessageCompetenceChange.setText("Kompetensen finns redan för " + name + ".");
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }          
    }//GEN-LAST:event_btnAddCompetenceMouseClicked

    /**
     * Event on combo box for setting the current level in a text field based on the persons level on that domain and platform.
     * @param evt 
     */
    private void cbChooseCompetenceChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbChooseCompetenceChangeActionPerformed
       //Sets the level in the levelbox according to what competence you choose.
       try
       {
        String selectedFunction = cbChooseCompetenceChange.getSelectedItem().toString();
        
        String name = cbListSpecialistChange.getSelectedItem().toString();
        String benamning = cbChooseCompetenceChange.getSelectedItem().toString();
        String plattform = cbChoosePlattformChange.getSelectedItem().toString();
        
        lblErrorMessageCompetenceChange.setText("");
        
         switch (selectedFunction)
        {
            case "Art" : 
                tasearchResultGameProject.setText("");
                getCompetenceLevel(name, benamning, plattform);
                break;
             
            case "Audio" :
                tasearchResultGameProject.setText("");
                getCompetenceLevel(name, benamning, plattform);     
                break;
                
            case "Programming" :
                tasearchResultGameProject.setText("");
                getCompetenceLevel(name, benamning, plattform);
                break;
                
            case "Design" :
                tasearchResultGameProject.setText("");
                getCompetenceLevel(name, benamning, plattform);
                break;
         }
       }
         catch(Exception e)
            {
            System.out.println(e.getMessage());
            }
    }//GEN-LAST:event_cbChooseCompetenceChangeActionPerformed

    /**
     * Event on combo box that runs the level display method while changing person.
     * @param evt 
     */
    private void cbListSpecialistChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbListSpecialistChangeActionPerformed
                                                    
        // Runs the level display method while changing person.
        try
        {
        String name = cbListSpecialistChange.getSelectedItem().toString();
        String benamning = cbChooseCompetenceChange.getSelectedItem().toString();
        String plattform = cbChoosePlattformChange.getSelectedItem().toString();
        
        lblErrorMessageCompetenceChange.setText("");
        
        getCompetenceLevel(name, benamning, plattform);
        }
        catch(Exception e)
            {
            System.out.println(e.getMessage());
            }
    }//GEN-LAST:event_cbListSpecialistChangeActionPerformed

    /**
     * Decreases the level of a certain skill of a specialist chosen from
     * the combo boxes. Returns an error message if the value tries to go under
     * 1, and tells the user to use the remove button instead.
     * @param evt 
     */
    private void btnLevelDownCompetenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLevelDownCompetenceMouseClicked
                                                
        // Decrease the value of the current level by 1. Can't go under 1.
      
        String strCurrentLevel = "";
        int currentLevel = 0;
        int newValue;
        
        strCurrentLevel = tfCurrentLevelChange.getText();
            
        if (!strCurrentLevel.equals(""))
            {
            currentLevel = Integer.parseInt(tfCurrentLevelChange.getText());
            }

            //Get specialist name and competence name.
            String name = cbListSpecialistChange.getSelectedItem().toString();
            String benamning = cbChooseCompetenceChange.getSelectedItem().toString();
            String plattform = cbChoosePlattformChange.getSelectedItem().toString();
            //Get AID and KID from names.
            String aid = database.getAidFromSpecialist(name);
            String kid = database.getKidFromCompetenceName(benamning);    
            String pid = database.getPidFromPlattformName(plattform);
        try
        {
           if (strCurrentLevel.equals(""))
            {
            lblErrorMessageCompetenceChange.setText("Använd 'Ta bort' för att ta bort en existerande kompetens.");
            }    
            else if (currentLevel != 1 )
            {
                newValue = currentLevel - 1;
                database.updateCompetenceLevel(aid, kid, pid, newValue);
                lblErrorMessageCompetenceChange.setText(name+ "s nivå inom " + benamning + ", " + plattform + " sänkt till " + newValue + ".");
                getCompetenceLevel(name, benamning, plattform);   
            }
            else
            {
                lblErrorMessageCompetenceChange.setText("En specialists nivå kan inte vara under 1. Använd 'Ta bort' istället.");
            }
        }
        catch(Exception e)
        {
        System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnLevelDownCompetenceMouseClicked

    /**
     * Increases the level of a certain skill of a specialist chosen from
     * the combo boxes. Returns an error message if the value tries to go over 5.
     * @param evt 
     */
    private void btnLevelUpCompetenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLevelUpCompetenceMouseClicked
        // Decrease the value of the current level by 1. Can't go under 1.

        String strCurrentLevel = "";
        int currentLevel = 0;
        int newValue;
        
        strCurrentLevel = tfCurrentLevelChange.getText();
            
        if (!strCurrentLevel.equals(""))
            {
            currentLevel = Integer.parseInt(tfCurrentLevelChange.getText());
            }
         
            //Get specialist name and competence name.
            String name = cbListSpecialistChange.getSelectedItem().toString();
            String benamning = cbChooseCompetenceChange.getSelectedItem().toString();
            String plattform = cbChoosePlattformChange.getSelectedItem().toString();
            //Get AID and KID from names.
            String aid = database.getAidFromSpecialist(name);
            String kid = database.getKidFromCompetenceName(benamning);
            String pid = database.getPidFromPlattformName(plattform);
        
        try
        {
            if (strCurrentLevel.equals(""))
            {
            lblErrorMessageCompetenceChange.setText("Använd 'Lägg Till' för att lägga till en ny kompetens.");
            }    
            else if (currentLevel != 5)
            {
                newValue = currentLevel + 1;
                database.updateCompetenceLevel(aid, kid, pid, newValue);
                lblErrorMessageCompetenceChange.setText(name + "s nivå inom " + benamning + ", " + plattform + " höjd till " + newValue + ".");
                getCompetenceLevel(name, benamning, plattform);   
            }
            else
            {
                lblErrorMessageCompetenceChange.setText("En specialists nivå kan inte vara över 5.");
            }
            
        }
        catch(Exception e)
        {
        System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnLevelUpCompetenceMouseClicked

    /**
     * Event on combo box that runs the level display method while changing person.
     * @param evt 
     */
    private void cbChoosePlattformChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbChoosePlattformChangeActionPerformed
        
        try
        {
        String name = cbListSpecialistChange.getSelectedItem().toString();
        String benamning = cbChooseCompetenceChange.getSelectedItem().toString();
        String plattform = cbChoosePlattformChange.getSelectedItem().toString();
        
        lblErrorMessageCompetenceChange.setText("");
        
        getCompetenceLevel(name, benamning, plattform);
        }
        catch(Exception e)
            {
            System.out.println(e.getMessage());
            }
    }//GEN-LAST:event_cbChoosePlattformChangeActionPerformed

    /**
    * Removes a certain competence level.
    * @param evt 
    */
    private void btnRemoveCompetenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveCompetenceMouseClicked
        
            //Get specialist name and competence name.
            String name = cbListSpecialistChange.getSelectedItem().toString();
            String benamning = cbChooseCompetenceChange.getSelectedItem().toString();
            String plattform = cbChoosePlattformChange.getSelectedItem().toString();
            //Get AID, KID and PID from names.
            String aid = database.getAidFromSpecialist(name);
            String kid = database.getKidFromCompetenceName(benamning);
            String pid = database.getPidFromPlattformName(plattform);
            
        try
        {  
            if (!tfCurrentLevelChange.getText().equals(""))
            {
                database.removeCompetenceLevel(aid, kid, pid);
                lblErrorMessageCompetenceChange.setText(benamning + " inom " + plattform + " är nu borttagen för " + name + ".");
                getCompetenceLevel(name, benamning, plattform);
            }
            else
            {
                lblErrorMessageCompetenceChange.setText("Kompetensen existerar inte  för " + name + ".");
            }
        }
        catch (Exception e)
        {
        System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnRemoveCompetenceMouseClicked

    /**
     * event that decides what to show based on which function that is chosen.
     * @param evt 
     */
    private void cbFunctionsCompetenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFunctionsCompetenceActionPerformed
        String competence = cbFunctionsCompetence.getSelectedItem().toString();
            switch (competence)
            {
            case "Uppdatera information om vilka domäner en specialist har kompetens för" :
                    btnSearchCompetence.setText("Gå");
                    cbCompetenceSpecialists.setVisible(false);
                    break;
            case "Lista den kompetens en specifik specialist har" :
                btnSearchCompetence.setText("Sök");
                cbCompetenceSpecialists.setVisible(true);
                break;
            }
    }//GEN-LAST:event_cbFunctionsCompetenceActionPerformed

    /**
     * button that preforms the changes on a game project.
     * @param evt 
     */
    private void btnChangeGameProjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeGameProjectMouseClicked
        try
        {
            // Changes the info about the game.

            //Fetches the values of the text fields and combo boxes. Used in validation.
            int startYear = Integer.parseInt(tfStartDateChangeYear.getText());
            int startMonth = Integer.parseInt(cbStartDateChangeMonth.getSelectedItem().toString());
            int startDay = Integer.parseInt(cbStartDateDay.getSelectedItem().toString());

            int releaseYear = Integer.parseInt(tfReleaseChangeYear.getText());
            int releaseMonth = Integer.parseInt(cbReleaseChangeMonth.getSelectedItem().toString());
            int releaseDay = Integer.parseInt(cbReleaseChangeDay.getSelectedItem().toString());

            if(Validation.checkDate(startYear, startMonth, startDay) && Validation.checkDate(releaseYear, releaseMonth, releaseDay) &&
                Validation.checkYear(tfStartDateChangeYear.getText()) && Validation.checkYear(tfReleaseChangeYear.getText()) &&
                Validation.containsString(tfGpChangeName.getText()) && Validation.textBoxTextIsRequired(tfGpChangeName))
            {
                String currentGames = cbListAllGames.getSelectedItem().toString();
                int sid = Integer.parseInt(currentGames.split(",")[0]);
                changeInfoAboutGame(sid);
                lblMessageChangeProject.setText("Ändringen genomförd! Projektnamnet är nu "+tfGpChangeName.getText()+" med datumen "+
                    releaseYear+"/"+releaseMonth+"/"+releaseDay+".");
            }
            else
            {
                lblMessageChangeProject.setText("Ändringen genomfördes ej. Kontrollera så att datumen och namnet är korrekt skrivet.");
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnChangeGameProjectMouseClicked

    /**
     * button that chooses what game project to change.
     * @param evt 
     */
    private void btnChooseChangeGameProjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChooseChangeGameProjectMouseClicked
        try
        {
            // Gets all the existing data about a game and fills the text-fields.

            String choosenGame = cbListAllGames.getSelectedItem().toString();
            int sid = Integer.parseInt(choosenGame.split(",")[0]);
            //populate textfields with existing data
            HashMap<String, String> games = database.listProject(sid);

            String name = games.get("BETECKNING");
            tfGpChangeName.setText(name);
            String startDate = games.get("STARTDATUM");
            tfChangeGpStartDate.setText(startDate);
            String releaseDate = games.get("RELEASEDATUM");
            tfChangeGpReleaseDate.setText(releaseDate);
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnChooseChangeGameProjectMouseClicked

    /**
    * Calls the database updateHired-method and sends the new info to it.
    */
    public void updateHired()
    {
        try
        {
            String currentLeader = cbListAllProjectleaders.getSelectedItem().toString();
            String currentGame = cbListAllGameProjects.getSelectedItem().toString();
            int aid = Integer.parseInt(currentLeader.split(",")[0]);
            int game = Integer.parseInt(currentGame.split(",")[0]);
            boolean match = false;
            lblErrorMessageHiredProjekt.setText("");

            HashMap<String, String> thisLeader = database.listALeader(aid);
            for (String leader: thisLeader.keySet())
            {
                if (!currentLeader.equals(leader))
                {
                    match = true;
                }
            }
            if(match)
            {
                database.updateHired(aid, game);
                lblErrorMessageHiredProjekt.setText("Uppdateringen utförd");
            }
            else
            {
                lblErrorMessageHiredProjekt.setText("Uppdateringen kunde ej utföras");
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Adds items to a combo box.
     */
    public void addProjectsToCBUpdate()			
    {   
        try
        {
            //Adds all the projects a specialist can work on to a cb.
            ArrayList<HashMap<String, String>> allProjects = database.listAllProjects();
            for (int i = 0; i < allProjects.size(); i++)
            {
                String sid = allProjects.get(i).get("SID");
                String beteckning = allProjects.get(i).get("BETECKNING");
                cbListAllGameProjectsUpdate.addItem(sid + "," + beteckning);
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Updates the employment-form.
     */
    public void updateHiredForm()
    {
	try
        {
            lblErrorMessageHiredUpdate.setText("");
            //Add all the employment-states to a cb
            String employment = cbHiredForm.getSelectedItem().toString();
            switch (employment)
            {
            case "Specialist" :
                updateEmploymentToSpecialist();
                break;
            case "Projektledare" :
                updateEmploymentToProjectleader();
                break;
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Updates the employment to specialist.
     */
    public void updateEmploymentToSpecialist ()   
    {
        try
        {
            String currentEmployee = cbListAllHiredPosition.getSelectedItem().toString();
            int aid = Integer.parseInt(currentEmployee.split(",")[0]);
            
            if (database.doesSpecialistExist(aid))
            {                
                lblErrorMessageHiredUpdate.setText(currentEmployee.split(",")[1] + " är redan speciallist");
            }            
            else if (!currentEmployee.isEmpty())
            {
                database.insertToSpecialist(aid);
                lblErrorMessageHiredUpdate.setText("Uppdateringen utförd");
            }
            else 
            {
                lblErrorMessageHiredUpdate.setText("Uppdateringen utfördes ej");
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }   
    }
    
    /**
     * Updates the employment tp projectleader.
     */
    public void updateEmploymentToProjectleader()
    {
        try
        {
            
            String currentEmployee = cbListAllHiredPosition.getSelectedItem().toString();
            int aid = Integer.parseInt(currentEmployee.split(",")[0]);

            if(!currentEmployee.isEmpty())
            {
                database.insertToProjectleader(aid);
                lblErrorMessageHiredUpdate.setText("Uppdateringen utförd");
            }
            else 
            {
                lblErrorMessageHiredUpdate.setText("Uppdateringen utfördes ej");
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
      /**
       * Adds projects to the cbChooseProjectHiredIn combo box.
       */
    public void addProjectsToCBChooseProjectHiredIn()
    {
        try
        {
            ArrayList<HashMap<String, String>> allProjects = database.listAllProjects();
            for (int i = 0; i<allProjects.size(); i++)
            {
                String benamning = allProjects.get(i).get("BETECKNING");
                cbChooseProjectHiredIn.addItem(benamning);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    
    /**
     * Add items to a combo box.
     */
    public void addPlatformsToUpdateCB()
    {
        try
        {
            
            ArrayList<HashMap<String, String>> allPlatforms = database.listPlatforms();
            for (int i = 0; i<allPlatforms.size(); i++)
            {
                String pid = allPlatforms.get(i).get("PID");
                String benamning = allPlatforms.get(i).get("BENAMNING");
                cbListAllPlatforms.addItem(pid + "," + benamning);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Add items to a combo box.
     */
    public void addProjectsToCB()			
    {       
        try
        {
            //Adds all the projects a specialist can work on to a cb.
            

            ArrayList<HashMap<String, String>> allProjects = database.listAllProjects();
            for (int i = 0; i < allProjects.size(); i++)
            {
                String sid = allProjects.get(i).get("SID");
                String beteckning = allProjects.get(i).get("BETECKNING");
                cbListAllGameProjects.addItem(sid + "," + beteckning);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Add items to a combo box.
     */
    public void addPlatformsToCB ()
    {
        try
        {
            
        
            ArrayList<HashMap<String, String>> allPlatforms = database.listPlatforms();
            for (int i = 0; i < allPlatforms.size(); i++)
            {
                    String pid = allPlatforms.get(i).get("PID");
                    String benamning = allPlatforms.get(i).get("BENAMNING");
                    cbListPlatforms.addItem(pid + "," + benamning);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Add items to a combo box.
     */
    public void addGamesPlatformToCB()
    {
        try
        {
            
        
            ArrayList<HashMap<String,String>> allGames = database.listAllProjects();
            for(int i = 0; i<allGames.size(); i++)
            {
                String sid = allGames.get(i).get("SID");
                String beteckning = allGames.get(i).get("BETECKNING");
                cbListAllGamesPlatform.addItem(sid + "," + beteckning);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Add items to a combo box.
     */
    public void addGamesToCB()
    {
        try
        {
            
	
            ArrayList<HashMap<String, String>> allProjects = database.listAllProjects();
            for (int i = 0; i < allProjects.size(); i++)
            {
                    String sid = allProjects.get(i).get("SID");
                    String beteckning = allProjects.get(i).get("BETECKNING");
                    cbListAllGames.addItem(sid + "," + beteckning);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Add items to a combo box.
     */
    public void addSpecialistToCBUpdate()			
    {      
        try
        {
            
	
            ArrayList<HashMap<String, String>> allSpecialists = database.listAllSpecialists();
            for (int i = 0; i < allSpecialists.size(); i++)
            {
                    //String sid = allProjects.get(i).get("SID");
                    String namn = allSpecialists.get(i).get("NAMN");
                    String aid = allSpecialists.get(i).get("AID");
                    cbListAllSpecialists.addItem(aid + "," + namn);
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    /**
     * Changes the position of a hired.
     */
    public void addHiredPosition()
    {
        try
        {
            ArrayList<HashMap<String, String>> allHiredPosition = database.listAllHired();
            for(int i = 0; i < allHiredPosition.size(); i++)
            {
                String aid = allHiredPosition.get(i).get("AID");
                String namn = allHiredPosition.get(i).get("NAMN");
                cbListAllHiredPosition.addItem(aid + "," + namn);
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage(false).setVisible(true);  
            }
        });
    }  
    
    /**
     * Lists the projects a person is working on.
     */
    private void listHired ()
    {
        try
        {
            String searchWord = tfsearchField.getText();
            
            tasearchResult.setText("");
            lblErrorMessageHired.setText("");
            
            
            if (Validation.textBoxTextIsRequired(tfsearchField) && Validation.containsString(searchWord))
            {    
                ArrayList<HashMap<String, String>> listHired = database.listHiredInProject(searchWord);
                if (listHired != null)
                {
                    for (int i = 0; i < listHired.size(); i++)
                    {
                        String project = listHired.get(i).get("BETECKNING");
                        tasearchResult.append(project + "\n");
                        lblFunctionError.setText("");
                    }
                }
                else
                {
                    lblFunctionError.setText("Personen jobbar inte med något projekt. Sök igen, var noga med gemener och varsaler");
                }
            }
            else
            {
                lblErrorMessageHired.setText("Använd endast a-ö, A-Ö, var noga med gemener och versaler");
            } 
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Shows who has been leading a specific project.
     */
    private void showLeader ()
    {
        try
        {
            String currentGame = cbAllGameProjects.getSelectedItem().toString();
            int gameID = Integer.parseInt(currentGame.split(",")[0]);

                String leader = database.listLeaderOnProject(gameID);
                    tasearchResultGameProject.setText(leader);
                    lblHeaderGameProject.setText("Projektledare: "+leader);
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
        
    }
            
    /**
     * Lists all the platforms a game is made for.
     */
    private void listPlatforms()
    {
        try 
        {
            String searchWord = tfsearchFieldGameProject.getText();
            
            if(!Validation.textBoxTextIsRequired(tfsearchFieldGameProject))
            {
                return;
            }
            if(!Validation.containsString(searchWord))
            {                
                lblErrorMessageGameProject.setText("Använd endast a-ö, A-Ö. Var noga med gemener och versaler");
                return;
            }
            
            tasearchResultGameProject.setText("");
            lblErrorMessageGameProject.setText("");
            ArrayList<HashMap<String, String>> listPlatform = database.listPlatformsForGames(searchWord);
            
            if(listPlatform != null)
            {
                for(int i = 0; i < listPlatform.size(); i++)
                {
                    String beteckning = listPlatform.get(i).get("BENAMNING");
                    tasearchResultGameProject.append(beteckning + "\n");
                    lblErrorMessageGameProject.setText("");
                }                
            }
            else
            {
                lblErrorMessageGameProject.setText("Spelet du sökte efter finns inte.");                
            } 
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Lists the platform a game is developed for.
     */
    private void listGameForPlatform ()
    {
        try
        {
            String currentPlatform = cbListPlatforms.getSelectedItem().toString();
            int PID = Integer.parseInt(currentPlatform.split(",")[0]);

            
            tasearchResultPlatform.setText("");

                ArrayList<HashMap<String, String>> listGame = database.listGamesForPlatform(PID);
                for (int i = 0; i < listGame.size(); i++)
                {
                    String game = listGame.get(i).get("BETECKNING");
                    tasearchResultPlatform.append(game + "\n");
                }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
        
    }
    
    /**
     * Adds projects to a combo box.
     */
    public void addGameProjectsToCB ()
    {
        try
        {
            
        
            ArrayList<HashMap<String, String>> allProjects = database.listAllProjects();
            for (int i = 0; i < allProjects.size(); i++)
            {
                String sid = allProjects.get(i).get("SID");
                String gameName = allProjects.get(i).get("BETECKNING");
                cbAllGameProjects.addItem(sid + "," + gameName);
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    
    /**
     * Adds items to the choose hired combo box.
     */
    private void listHiredInProjects()
    {
        
        try
        {
            String project = cbChooseProjectHiredIn.getSelectedItem().toString();
            //Hämtar SIDt från ett projekt med hjälp av beteckningen.
            String sid = database.getSidFromBeteckning(project);
            
            ArrayList<HashMap<String, String>> allHiredInProject = database.listWorksInProjects(sid);
            
            tasearchResult.setText("");
            
            for(int i = 0; i < allHiredInProject.size(); i++)
                {
                    String namn = allHiredInProject.get(i).get("NAMN");
                    tasearchResult.append(namn + "\n");
                }

            
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    
    /**
     * Lists the projects a person is leading.
     */
    private void listProjects()
    {
        try
        {
            String searchWord = tfsearchField.getText();
            tasearchResult.setText("");
            lblErrorMessageHired.setText("");
            
            if (Validation.textBoxTextIsRequired(tfsearchField) && Validation.containsString(searchWord))
            {
                ArrayList<HashMap<String, String>> listProject = database.listProjects(searchWord);
                if (listProject != null)
                {
                    for(int i = 0; i < listProject.size(); i++)
                    {
                        String beteckningen = listProject.get(i).get("BETECKNING");
                        String startdatumet = listProject.get(i).get("STARTDATUM");
                        String releasedatumet = listProject.get(i).get("RELEASEDATUM");
                        tasearchResult.append(beteckningen + " " + startdatumet + " " + releasedatumet + "\n");
                        lblFunctionError.setText("");
                    }
                }
                else
                {
                    lblFunctionError.setText("Personen arbetar inte med några projekt, prova sök igen, och var noga med gemener och versaler");

                }
            }
            else
            {
                lblErrorMessageHired.setText("Använd endast a-ö, A-Ö, var noga med versaler och gemener");
            }
         
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Adds items to a combo box.
     */
    public void addLeadersToCbNewProjLeader()			
    {   
        try
        {
            //Adds a new leader to the selected project
            

            ArrayList<HashMap<String, String>> allProjects = database.listAllLeaders();
            for (int i = 0; i < allProjects.size(); i++)
            {
                    //String sid = allProjects.get(i).get("SID");
                    String namn = allProjects.get(i).get("NAMN");
                    cbNewProjLeader.addItem(namn);
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * A method that lists all games that have been released.
     */
    private void listReleases()             
    {
        try 
        {
            ArrayList<HashMap<String, String>> listReleases = database.listReleasedGames();

                for(int i = 0; i < listReleases.size(); i++)
                {
                    String beteckningen = listReleases.get(i).get("BETECKNING");
                    String sid = listReleases.get(i).get("SID");
                    tasearchResultGameProject.append(sid + " " + beteckningen + "\n");
                }  
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
               
    }
    
    /**
     * A method that lists all games that are under development
     */
     private void listProjectsUnderDevelopment()             
    {
        try
        {
            ArrayList<HashMap<String, String>> listDeveloping = database.listUnderDevelopment();

                for(int i = 0; i < listDeveloping.size(); i++)
                {
                    String beteckningen = listDeveloping.get(i).get("BETECKNING");
                    String sid = listDeveloping.get(i).get("SID");
                    tasearchResultGameProject.append(sid + " " + beteckningen + "\n");
                }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }    
    }
    
    /**
     * A method that generates all the hired staff in a combo box-list.
     */
    private void addHiredToCB()
    {
        try
        {
            //create a cb that holds all the hired staff
            ArrayList<HashMap<String, String>> allHired = database.listAllHired();
            for (int i = 0; i < allHired.size(); i++)
            {
                String aid = allHired.get(i).get("AID");
                String name = allHired.get(i).get("NAMN");
                cbListAllHired.addItem(aid + "," + name);
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    private boolean isAdmin(int AID)
    {
        boolean admin = false;
            
        
        
            //Loops through all admins and checks if the person choosen in the combobox is an admin.
            ArrayList<HashMap<String, String>> admins = database.listAdmin(AID);
            
            if(admins != null)
            {
                admin = true;
            }
            return admin;
    }
    
    /**
     * Lets you change information about the chosen one.
     * @param AID 
     */
    private void changeInfoAboutHired (int AID)              
    {
        try
        {
            
            HashMap<String, String> hired = database.listHired(AID);

            //Gets the current info from the database and the new typed in to the boxes
            String existingName = hired.get("NAMN");
            String setName = tfChangeFirstNameHired.getText();
            String setLastName = tfChangeLastNameHired.getText();
            //String firstName = setName.split(" ")[0];
            //String lastName = setName.split(" ")[1];
            String existingTelephone = hired.get("TELEFON");
            String setPhone = tfChangeTelephoneHired.getText();
            String existingMail = hired.get("MAIL");
            String setMail = tfChangeMailHired.getText();
            String setPassword = new String(pfPassword.getPassword());
                
            if (isAdmin(AID))       //checks if the user they want to change is administrator and lets you change the password.
            {
                database.changeAdmin(AID, setPassword);
            }
            
            if (Validation.textBoxTextIsRequired(tfChangeFirstNameHired) && Validation.textBoxTextIsRequired(tfChangeTelephoneHired) 
                    && Validation.textBoxTextIsRequired(tfChangeMailHired))
            {
                //checks so that the new info doesn't already exist and sends in the new info to the database
                if (!setName.equals(existingName) || !setPhone.equals(existingTelephone) || !setMail.equals(existingMail))
                {
                    database.changeHired(setName, setPhone, setMail, AID);
                    lblErrorMessageHired.setText("Ändringen genomförd");
                }
                else
                {
                    lblErrorMessageHired.setText("Ändringen kunde ej genomföras");
                }
            } 
            else
            {
                lblErrorMessageHired.setText("En textruta får aldrig lämnas tom.");
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Lets you change information about the chosen game
     */

    private void changeInfoAboutGame (int sid)                 
    {
        try
        {HashMap<String, String> game = database.listProject(sid);
        
            //Gets the current name from the database
            String existingName = game.get("BETECKNING");
            String setName = tfGpChangeName.getText();
            
            String existingStartDate = game.get("STARTDATUM");
            String day = cbStartDateChangeDay.getSelectedItem().toString();
            int dateDay = Integer.parseInt(day);
            String month = cbStartDateChangeMonth.getSelectedItem().toString();
            String year = tfStartDateChangeYear.getText();
            String setStartDate = day + "." + month + "." + year;
           
            String existingRelease = game.get("RELEASEDATUM");
            String releaseDay = cbReleaseChangeDay.getSelectedItem().toString();
            String releaseMonth = cbReleaseChangeMonth.getSelectedItem().toString();
            String releaseYear = tfReleaseChangeYear.getText();
            String setRelease = releaseDay + "." + releaseMonth + "." + releaseYear;
           
            if (!setName.equals(existingName) || !setStartDate.equals(existingStartDate) || !setRelease.equals(existingRelease))
            {
                database.changeGame(setName, setStartDate, setRelease, sid);
                System.out.println("Ändring genomförd");
            }
            else
            {
                System.out.println("nope");
            }
            
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
        
    }
    
     /**
     * Adds a new project to the database. Validates name and dates.
     */
    public void addNewProject()            
    {
        try
        {
            int newSID = database.generateSID();
        
            String beteckning = tfGpAddName.getText();
       
            //Gets the combo box values and puts them in strings.
            //Reason for having this separate from the added strings is that we
            //are going to use these in multiple places.
            int startDay = Integer.parseInt(cbStartDateDay.getSelectedItem().toString());
            int startMonth = Integer.parseInt(cbStartDateMonth.getSelectedItem().toString());
            int startYear = Integer.parseInt(tfStartDateYear.getText());
        
            int releaseDay = Integer.parseInt(cbReleaseDateDay.getSelectedItem().toString());
            int releaseMonth = Integer.parseInt(cbReleaseDateMonth.getSelectedItem().toString());
            int releaseYear = Integer.parseInt(tfReleaseDateYear.getText());
        
            //Adds the combo box values in to one date, x2.
            String startDatum = startDay + "." + startMonth + "." + startYear;
            String releaseDatum = releaseDay + "." + releaseMonth + "." + releaseYear;
        
            //Adds the combo box values in to one number, to check dates.
            int startDatumTotal = startDay + startMonth + startYear;
            int releaseDatumTotal = releaseDay + releaseMonth + releaseYear;
        
            // Checks if the name allready exists in the database.
            boolean nameExists = false;
        
            ArrayList<HashMap<String, String>> listProjectNames = database.listAllProjectNames();

                for(int i = 0; i < listProjectNames.size(); i++)
                {
                    String beteckningen = listProjectNames.get(i).get("BETECKNING");
                    
                    if (beteckningen.equals(beteckning))
                    {
                        nameExists = true;
                    }
                }  
        
            String strLeaderAID = "";
        
            //Adds a new leader to the project.
            ArrayList<HashMap<String, String>> listLeaders = database.listAllLeaders();

                for(int i = 0; i < listLeaders.size(); i++)
                {
                    //Gets the current name.
                    String leaderName = listLeaders.get(i).get("NAMN");
                    
                    //Compares the combo box name to the current leader in the loop.
                    //if it's a match, it sets the strLeaderAID to that leaders AID.
                    if (cbNewProjLeader.getSelectedItem().toString().equals(leaderName))
                    {
                        strLeaderAID = listLeaders.get(i).get("AID");
                    }
                } 
        
            //Sets the leaders AID that was fetched from the loop to int.
            int leaderAID = Integer.parseInt(strLeaderAID);
        
            //Validation check.
            if (startDatumTotal < releaseDatumTotal && nameExists == false && Validation.checkDate(startDay, startMonth, startYear) 
                    && Validation.checkDate(releaseDay, releaseMonth, releaseYear))
            {
                 database.addProject(newSID, beteckning, startDatum, releaseDatum, leaderAID);
                lblAddProjectText.setText(beteckning + " är nu tillagd!");
            }
            else
            {
                lblAddProjectText.setText(beteckning + " kunde inte läggas till. \n"
                    + "Se till att namnet är unikt och att startdatumet är innan releasedatumet.");
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
                                                    
    /**
    * List all specialist competences.
    */
    private void listSpecialistCompetence()
    {
        //Adds all the competences a specialist has.
        
        String kid;
        String pid;
        String kompetensniva;
        String beteckning;
        String plattform;
        
        String name = cbCompetenceSpecialists.getSelectedItem().toString();
        String aid = database.getAidFromSpecialist(name);
        
        try
        {
	ArrayList<HashMap<String, String>> allCompetences = database.getSpecialistCompetence(aid);
	for (int i = 0; i < allCompetences.size(); i++)
	{
		kid = allCompetences.get(i).get("KID");
		kompetensniva = allCompetences.get(i).get("KOMPETENSNIVA");
                pid = allCompetences.get(i).get("PID");
                plattform = database.getPlatformFromPid(pid);
                beteckning = database.getCompetenceName(kid);
                String textHolder = tasearchResultCompetence.getText();
		tasearchResultCompetence.setText(textHolder + "Avdelning: " + beteckning + "\nPlattform: " + plattform + "\nKompetensnivå: " + kompetensniva + "\n" + "\n");
	}
        updateCBs();
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Adds items to combo box.
     */
    public void addSpecialistsToCBCompetence()
    {
        try
        {
            
	
            ArrayList<HashMap<String, String>> specialists = database.listAllSpecialists();
            for (int i = 0; i < specialists.size(); i++)
            {
                    String name = specialists.get(i).get("NAMN");
                    cbCompetenceSpecialists.addItem(name);
            }
        }
	catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
    * Throws the new info about a hired to the database-class.
    */
    public void addNewHired ()
    {
        try
        {
            int newAID = database.generateAID();
            String firstname = tfAddFirstName.getText();
            String lastname = tfAddLastName.getText();
            String phone = tfAddTelephone.getText();
            String mail = tfAddMail.getText();
	
            //Gets the info from the textboxes and validates it.
            if (Validation.textBoxTextIsRequired(tfAddFirstName) && Validation.textBoxTextIsRequired(tfAddLastName) && Validation.textBoxTextIsRequired(tfAddTelephone) && Validation.textBoxTextIsRequired(tfAddMail))
            {                
                //Create a username based on the firstnames first letter, the lastnames first and last letter.
                String sistaBokstaven = lastname.substring(lastname.length()-1, lastname.length());
                String username = firstname.substring(0,1) + lastname.substring(0,1) + sistaBokstaven;       

                //checks if there is any text in the textfields and then adds the text in them to the database.
                if (Validation.checkName(firstname, lastname) && Validation.checkNumber(phone) && Validation.checkMail(mail))
                {
                    String name = firstname + " " + lastname;
                    database.addHired(newAID, name, phone, mail, username);
                    lblErrorMessageHired.setText(name + " är nu tillagd!");
                }
                else
                {
                    lblErrorMessageHired.setText("Personen kunde inte läggas till");
                }
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
	
    }
    
    /**
     * Updates the platforms a game is developed for.
     */
    private void updatePlatformGame()
    {
        try 
        {
            String currentGame = cbListAllGamesPlatform.getSelectedItem().toString();
            int sid = Integer.parseInt(currentGame.split(",")[0]);
            String currentPlatform = cbListAllPlatforms.getSelectedItem().toString();
            int pid = Integer.parseInt(currentPlatform.split(",")[0]);
            
            lblErrorMessagePlatform.setText("");

            if (!database.doesExistInInnefattar(sid, pid))
            {
                database.insertGamePlatform(sid, pid);
                lblErrorMessagePlatform.setText("Ändringen genomförd");
            }
            else
            {
                lblErrorMessagePlatform.setText("Ändringen kunde inte genomföras");
            }
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Gets the competence level from the database.
     * @param name
     * @param benamning
     * @param plattform 
     */
    private void getCompetenceLevel(String name, String benamning, String plattform)
    {
        
        try
        {
            String aid = database.getAidFromSpecialist(name);
            String kid = database.getKidFromCompetenceName(benamning);
            String pid = database.getPidFromPlattformName(plattform);
            
            String competenceLevel  = database.getCompetenceLevel(aid, kid, pid);

            tfCurrentLevelChange.setText(competenceLevel);
     
        }
        catch(Exception e)
            {
            System.out.println(e.getMessage());
            }       
    }
    
    /**
     * Adds competences to a combo box.
     */
    private void addCompetenceToCB()
    {
	ArrayList<HashMap<String, String>> competenceNames = database.getCompetenceNames();
	for (int i = 0; i < competenceNames.size(); i++)
	{
		String competenceName = competenceNames.get(i).get("BENAMNING");
		cbChooseCompetenceChange.addItem(competenceName);
                
	}
    }
    
    /**
     * Adds items to a combo box for choosing a specialist to change their competence.
     */
    public void addSpecialistsToCBCompetenceChange()
    {
	
	ArrayList<HashMap<String, String>> specialists = database.listAllSpecialists();
	for (int i = 0; i < specialists.size(); i++)
	{
		String name = specialists.get(i).get("NAMN");
                cbListSpecialistChange.addItem(name);
	}
    }
    
    /**
     * adds items to combobox
     */
    public void addPlatformsToCBChange()
    {
	
	ArrayList<HashMap<String, String>>platformNames = database.listPlatformNames();
	for (int i = 0; i < platformNames.size(); i++)
	{
		String name = platformNames.get(i).get("BENAMNING");
                cbChoosePlattformChange.addItem(name);
	}
    }
    
    /**
     * Shows the fields about a Hired when someone with full access is logged in.
     */
    private void showHiredChangeFields()
    {
        paneChangeHired.setVisible(true);
	tpSubMenuHired.setVisible(true);
	lblHeaderChangeHired.setVisible(true);
	lblChooseHired.setVisible(true);
	cbListAllHired.setVisible(true);
	btnChooseChangeHired.setVisible(true);
	lblChangeFirstNameHired.setVisible(true);
	tfChangeFirstNameHired.setVisible(true);
	lblChangeTelephoneHired.setVisible(true);
	tfChangeTelephoneHired.setVisible(true);
	lblChangeMailHired.setVisible(true);
	tfChangeMailHired.setVisible(true);
	btnChangeHired.setVisible(true);
        lblPassword.setVisible(true);
        pfPassword.setVisible(true);
        lblVerifyPassword.setVisible(true);
        pfVerifyPassword.setVisible(true);

    }
    
    /**
     * Hides the fields about a Hired when someone without full access is using the program.
     */
    private void hideHiredChangeFields()
    {     
        paneChangeHired.setVisible(false);
	tpSubMenuHired.setVisible(false);
	lblHeaderChangeHired.setVisible(false);
	lblChooseHired.setVisible(false);
	cbListAllHired.setVisible(false);
	btnChooseChangeHired.setVisible(false);
	lblChangeFirstNameHired.setVisible(false);
	tfChangeFirstNameHired.setVisible(false);
	lblChangeTelephoneHired.setVisible(false);
	tfChangeTelephoneHired.setVisible(false);
	lblChangeMailHired.setVisible(false);
	tfChangeMailHired.setVisible(false);
	btnChangeHired.setVisible(false);
        lblPassword.setVisible(false);
        pfPassword.setVisible(false);
        lblVerifyPassword.setVisible(false);
        pfVerifyPassword.setVisible(false);
    }
    
    /**
     * Shows the fields for removing a Hired when someone with full access is using the program.
     */
    private void showHiredRemoveFields ()
    {
	tpSubMenuHired.setVisible(true);
	paneRemoveHired.setVisible(true);
	lblChooseHiredRemove.setVisible(true);
	cbListAllHiredRemove.setVisible(true);
	btnRemove.setVisible(true);
	lblNote.setVisible(true);
	lblHeaderRemove.setVisible(true);
    }

    /**
     * Hides the fields for removing a Hired when someone without full access is using the program.
     */
    private void hideHiredRemoveFields ()
    {
	tpSubMenuHired.setVisible(false);
	paneRemoveHired.setVisible(false);
	lblChooseHiredRemove.setVisible(false);
	cbListAllHiredRemove.setVisible(false);
	btnRemove.setVisible(false);
	lblNote.setVisible(false);
	lblHeaderRemove.setVisible(false);
    }

    /**
     * Shows the fields for adding a hired when someone with full access is using the program.
     */
    private void showHiredAddFields ()
    {
	tpSubMenuHired.setVisible(true);
	lblHeaderAdd.setVisible(true);
	paneAddHired.setVisible(true);
	tfAddMail.setVisible(true);
	lblAddFirstName.setVisible(true);
	tfAddFirstName.setVisible(true);
        lblAddLastName.setVisible(true);
        tfAddLastName.setVisible(true);
	lblAddTelephone.setVisible(true);
	tfAddTelephone.setVisible(true);
	lblAddMail.setVisible(true);
	btnChangeHiredAdd.setVisible(true);
    }

    /**
     * Hides the fields for adding a hired when someone without full access is using the program.
     */
    private void hideHiredAddFields ()
    {
	tpSubMenuHired.setVisible(false);
	lblHeaderAdd.setVisible(false);
	paneAddHired.setVisible(false);
	tfAddMail.setVisible(false);
	lblAddFirstName.setVisible(false);
	tfAddFirstName.setVisible(false);
        lblAddLastName.setVisible(false);
        tfAddLastName.setVisible(false);
	lblAddTelephone.setVisible(false);
	tfAddTelephone.setVisible(false);
	lblAddMail.setVisible(false);
	btnChangeHiredAdd.setVisible(false);
        cbChooseProjectHiredIn.setVisible(false);
    }
    
    /**
     * Shows the fields for updating a Hired when someone with full access is using the program.
     */
    private void showHiredUpdateFields ()
    {
	tpSubMenuHired.setVisible(true);
	paneUpdateHired.setVisible(true);
	lblChooseGameProject.setVisible(true);
	cbListAllGameProjects.setVisible(true);
	lblChooseProjectleader.setVisible(true);
	cbListAllProjectleaders.setVisible(true);
	btnConfirmUpdate.setVisible(true);
	lblUpdateLeader.setVisible(true);
        lblErrorMessagePlatform.setVisible(true);
        lblErrorMessageHiredProjekt.setVisible(true);
        lblErrorMessageHiredGP.setVisible(true);
        lblErrorMessageHiredUpdate.setVisible(true);
    }

    /**
     * Hides the fields for updating a Hired when someone without full access is using the program.
     */
    private void hideHiredUpdateFields ()
    {
	tpSubMenuHired.setVisible(false);
	paneUpdateHired.setVisible(false);
	lblChooseGameProject.setVisible(false);
	cbListAllGameProjects.setVisible(false);
	lblChooseProjectleader.setVisible(false);
	cbListAllProjectleaders.setVisible(false);
	btnConfirmUpdate.setVisible(false);
	lblUpdateLeader.setVisible(false);
        lblErrorMessagePlatform.setVisible(false);
        lblErrorMessageHiredProjekt.setVisible(false);
        lblErrorMessageHiredGP.setVisible(false);
        lblErrorMessageHiredUpdate.setVisible(false);
    }

    /**
     * Shows the fields for adding a game project when someone with full access is using the program.
     */
    private void showGpAddFields ()
    {
	tpSubMenuGameProject.setVisible(true);
	paneAddGameProject.setVisible(true);
	lblHeaderAddGameProject.setVisible(true);
	lblGpAddName.setVisible(true);
	tfGpAddName.setVisible(true);
	lblGpAddStartDate.setVisible(true);
	lblGpAddReleaseDate.setVisible(true);
	btnAddGameProject.setVisible(true);
        lblAddDay.setVisible(true);
        cbStartDateDay.setVisible(true);
        lblAddMonth.setVisible(true);
        cbStartDateMonth.setVisible(true);
        lblDateYear.setVisible(true);
        tfStartDateYear.setVisible(true);
        lblAddDayRelease.setVisible(true);
        cbReleaseDateDay.setVisible(true);
        lblAddMonthRelease.setVisible(true);
        cbReleaseDateMonth.setVisible(true);
        lblDateYearRelease.setVisible(true);
        tfReleaseDateYear.setVisible(true);
        cbNewProjLeader.setVisible(true);
        lblChooseLeaderAddGP.setVisible(true);
        lblAddProjectText.setVisible(true);
    }
    
    /**
     * Hides the fields for adding a game project when someone without full access is using the program.
     */
    private void hideGpAddFields ()
    {
	tpSubMenuGameProject.setVisible(false);
	paneAddGameProject.setVisible(false);
	lblHeaderAddGameProject.setVisible(false);
	lblGpAddName.setVisible(false);
	tfGpAddName.setVisible(false);
	lblGpAddStartDate.setVisible(false);
	lblGpAddReleaseDate.setVisible(false);
	btnAddGameProject.setVisible(false);
        lblAddDay.setVisible(false);
        cbStartDateDay.setVisible(false);
        lblAddMonth.setVisible(false);
        cbStartDateMonth.setVisible(false);
        lblDateYear.setVisible(false);
        tfStartDateYear.setVisible(false);
        lblAddDayRelease.setVisible(false);
        cbReleaseDateDay.setVisible(false);
        lblAddMonthRelease.setVisible(false);
        cbReleaseDateMonth.setVisible(false);
        lblDateYearRelease.setVisible(false);
        tfReleaseDateYear.setVisible(false);
        cbNewProjLeader.setVisible(false);
        lblChooseLeaderAddGP.setVisible(false);
        lblAddProjectText.setVisible(false);
	}
    
    /**
     * Shows the fields for changing a game project when someone with full access is using the program.
     */
    private void showGpChangeFields()
    {
        tpSubMenuGameProject.setVisible(true);
	paneChangeGameProject.setVisible(true);
	lblHeaderChangeGameProject.setVisible(true);
	lblChooseGame.setVisible(true);
	cbListAllGames.setVisible(true);
	btnChooseChangeGameProject.setVisible(true);
	btnChangeGameProject.setVisible(true);
	tfChangeGpReleaseDate.setVisible(true);
	lblGpChangeReleaseDate.setVisible(true);
	lblGpChangeStartDate.setVisible(true);
	tfChangeGpStartDate.setVisible(true);
	tfGpChangeName.setVisible(true);
	lblGpChangeName.setVisible(true);
        lblStartDateChangeDay.setVisible(true);
        cbStartDateChangeDay.setVisible(true);
        lblStartDateChangeMonth.setVisible(true);
        cbStartDateChangeMonth.setVisible(true);
        lblStartDateChangeYear.setVisible(true);
        tfStartDateChangeYear.setVisible(true);
        lblReleaseChangeDay.setVisible(true);
        cbReleaseChangeDay.setVisible(true);
        lblReleaseChangeMonth.setVisible(true);
        cbReleaseChangeMonth.setVisible(true);
        lblReleaseChangeYear.setVisible(true);
        tfReleaseChangeYear.setVisible(true);
        lblMessageChangeProject.setVisible(true);
    }

    /**
     * Hides the fields for changing a game project when someone without full access is using the program.
     */
    private void hideGpChangeFields()
    {
	paneChangeGameProject.setVisible(false);
	lblHeaderChangeGameProject.setVisible(false);
	lblChooseGame.setVisible(false);
	cbListAllGames.setVisible(false);
	btnChooseChangeGameProject.setVisible(false);
	btnChangeGameProject.setVisible(false);
	tfChangeGpReleaseDate.setVisible(false);
	lblGpChangeReleaseDate.setVisible(false);
	lblGpChangeStartDate.setVisible(false);
	tfChangeGpStartDate.setVisible(false);
	tfGpChangeName.setVisible(false);
	lblGpChangeName.setVisible(false);
        lblStartDateChangeDay.setVisible(false);
        cbStartDateChangeDay.setVisible(false);
        lblStartDateChangeMonth.setVisible(false);
        cbStartDateChangeMonth.setVisible(false);
        lblStartDateChangeYear.setVisible(false);
        tfStartDateChangeYear.setVisible(false);
        lblReleaseChangeDay.setVisible(false);
        cbReleaseChangeDay.setVisible(false);
        lblReleaseChangeMonth.setVisible(false);
        cbReleaseChangeMonth.setVisible(false);
        lblReleaseChangeYear.setVisible(false);
        tfReleaseChangeYear.setVisible(false);
        lblMessageChangeProject.setVisible(false);
    }
    
    /**
     * Shows the fields for changing a platform when someone with full access is using the program.
     */
    private void showPlatformUpdateFields ()
    {
        lblPlatformUpdateHeader.setVisible(true);
        lblChoosePlatform.setVisible(true);
        cbListAllPlatforms.setVisible(true);
        lblChooseGameProjectPlatform.setVisible(true);
        cbListAllGamesPlatform.setVisible(true);
        btnConfirmUpdatePlatform.setVisible(true);
    }
    
    /**
     * Hides the fields for changing a platform when someone without full access is using the program.
     */
    private void hidePlatformUpdateFields ()
    {
        lblPlatformUpdateHeader.setVisible(false);
        lblChoosePlatform.setVisible(false);
        cbListAllPlatforms.setVisible(false);
        lblChooseGameProjectPlatform.setVisible(false);
        cbListAllGamesPlatform.setVisible(false);
        btnConfirmUpdatePlatform.setVisible(false);
    }

    /**
     * Shows the fields for changing a competence when someone without full access is using the program.
     */
    private void showCompetenceUpdate()
    {
        
        lblCompetenceTitle.setVisible(true);	
        lblChooseSpecialistChange.setVisible(true);	
        cbListSpecialistChange.setVisible(true);
        lblChooseCompetenceChange.setVisible(true);
        cbChooseCompetenceChange.setVisible(true);
        lblChangeLevel.setVisible(true);
        tfCurrentLevelChange.setVisible(true);
        btnLevelDownCompetence.setVisible(true);
        btnLevelUpCompetence.setVisible(true);
        btnAddCompetence.setVisible(true);
        btnRemoveCompetence.setVisible(true);
        cbChoosePlattformChange.setVisible(true);
        lblErrorMessageCompetenceChange.setVisible(true);
        lblChoosePlatformChange.setVisible(true);
    }
    
    /**
     * Hides the fields for changing a competence when someone without full access is using the program.
     */
    private void hideCompetenceUpdate()
    {
        
        lblCompetenceTitle.setVisible(false);	
        lblChooseSpecialistChange.setVisible(false);	
        cbListSpecialistChange.setVisible(false);
        lblChooseCompetenceChange.setVisible(false);
        cbChooseCompetenceChange.setVisible(false);
        lblChangeLevel.setVisible(false);
        tfCurrentLevelChange.setVisible(false);
        btnLevelDownCompetence.setVisible(false);
        btnLevelUpCompetence.setVisible(false);
        btnAddCompetence.setVisible(false);
        btnRemoveCompetence.setVisible(false);
        cbChoosePlattformChange.setVisible(false);
        lblErrorMessageCompetenceChange.setVisible(false);
        lblChoosePlatformChange.setVisible(false);
    }
    
        
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCompetence;
    private javax.swing.JButton btnAddGameProject;
    private javax.swing.JButton btnChangeGameProject;
    private javax.swing.JButton btnChangeHired;
    private javax.swing.JButton btnChangeHiredAdd;
    private javax.swing.JButton btnChooseChangeGameProject;
    private javax.swing.JButton btnChooseChangeHired;
    private javax.swing.JButton btnConfirmUpdate;
    private javax.swing.JButton btnConfirmUpdateHired;
    private javax.swing.JButton btnConfirmUpdatePlatform;
    private javax.swing.JButton btnConfirmUpdatePosition;
    private javax.swing.JButton btnConfirmUpdateRemoved;
    private javax.swing.JButton btnLevelDownCompetence;
    private javax.swing.JButton btnLevelUpCompetence;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveCompetence;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchCompetence;
    private javax.swing.JButton btnSearchGameProject;
    private javax.swing.JButton btnSearchPlatform;
    private javax.swing.JComboBox<String> cbAllGameProjects;
    private javax.swing.JComboBox<String> cbChooseCompetenceChange;
    private javax.swing.JComboBox<String> cbChoosePlattformChange;
    private javax.swing.JComboBox<String> cbChooseProjectHiredIn;
    private javax.swing.JComboBox<String> cbCompetenceSpecialists;
    private javax.swing.JComboBox<String> cbFunctions;
    private javax.swing.JComboBox<String> cbFunctionsCompetence;
    private javax.swing.JComboBox<String> cbFunctionsGameProject;
    private javax.swing.JComboBox<String> cbFunctionsPlatform;
    private javax.swing.JComboBox<String> cbHiredForm;
    private javax.swing.JComboBox<String> cbListAllGameProjects;
    private javax.swing.JComboBox<String> cbListAllGameProjectsUpdate;
    private javax.swing.JComboBox<String> cbListAllGames;
    private javax.swing.JComboBox<String> cbListAllGamesPlatform;
    private javax.swing.JComboBox<String> cbListAllHired;
    private javax.swing.JComboBox<String> cbListAllHiredPosition;
    private javax.swing.JComboBox<String> cbListAllHiredRemove;
    private javax.swing.JComboBox<String> cbListAllPlatforms;
    private javax.swing.JComboBox<String> cbListAllProjectleaders;
    private javax.swing.JComboBox<String> cbListAllSpecialists;
    private javax.swing.JComboBox<String> cbListPlatforms;
    private javax.swing.JComboBox<String> cbListSpecialistChange;
    private javax.swing.JComboBox<String> cbNewProjLeader;
    private javax.swing.JComboBox<String> cbReleaseChangeDay;
    private javax.swing.JComboBox<String> cbReleaseChangeMonth;
    private javax.swing.JComboBox<String> cbReleaseDateDay;
    private javax.swing.JComboBox<String> cbReleaseDateMonth;
    private javax.swing.JComboBox<String> cbStartDateChangeDay;
    private javax.swing.JComboBox<String> cbStartDateChangeMonth;
    private javax.swing.JComboBox<String> cbStartDateDay;
    private javax.swing.JComboBox<String> cbStartDateMonth;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAddDay;
    private javax.swing.JLabel lblAddDayRelease;
    private javax.swing.JLabel lblAddFirstName;
    private javax.swing.JLabel lblAddLastName;
    private javax.swing.JLabel lblAddMail;
    private javax.swing.JLabel lblAddMonth;
    private javax.swing.JLabel lblAddMonthRelease;
    private javax.swing.JLabel lblAddProjectText;
    private javax.swing.JLabel lblAddTelephone;
    private javax.swing.JLabel lblChangeFirstNameHired;
    private javax.swing.JLabel lblChangeHiredMessage;
    private javax.swing.JLabel lblChangeLastNameHired;
    private javax.swing.JLabel lblChangeLevel;
    private javax.swing.JLabel lblChangeMailHired;
    private javax.swing.JLabel lblChangeTelephoneHired;
    private javax.swing.JLabel lblChooseCompetenceChange;
    private javax.swing.JLabel lblChooseGame;
    private javax.swing.JLabel lblChooseGameProject;
    private javax.swing.JLabel lblChooseGameProjectPlatform;
    private javax.swing.JLabel lblChooseGameProjectUpdate;
    private javax.swing.JLabel lblChooseHired;
    private javax.swing.JLabel lblChooseHiredPosition;
    private javax.swing.JLabel lblChooseHiredRemove;
    private javax.swing.JLabel lblChooseLeaderAddGP;
    private javax.swing.JLabel lblChoosePlatform;
    private javax.swing.JLabel lblChoosePlatformChange;
    private javax.swing.JLabel lblChooseProjectleader;
    private javax.swing.JLabel lblChooseSpecialist;
    private javax.swing.JLabel lblChooseSpecialistChange;
    private javax.swing.JLabel lblChooseUpgrade;
    private javax.swing.JLabel lblCompetenceTitle;
    private javax.swing.JLabel lblDateYear;
    private javax.swing.JLabel lblDateYearRelease;
    private javax.swing.JLabel lblErrorMessageCompetence;
    private javax.swing.JLabel lblErrorMessageCompetenceChange;
    private javax.swing.JLabel lblErrorMessageGameProject;
    private javax.swing.JLabel lblErrorMessageHired;
    private javax.swing.JLabel lblErrorMessageHiredGP;
    private javax.swing.JLabel lblErrorMessageHiredProjekt;
    private javax.swing.JLabel lblErrorMessageHiredUpdate;
    private javax.swing.JLabel lblErrorMessagePlatform;
    private javax.swing.JLabel lblFunctionError;
    private javax.swing.JLabel lblGpAddName;
    private javax.swing.JLabel lblGpAddReleaseDate;
    private javax.swing.JLabel lblGpAddStartDate;
    private javax.swing.JLabel lblGpChangeName;
    private javax.swing.JLabel lblGpChangeReleaseDate;
    private javax.swing.JLabel lblGpChangeStartDate;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblHeaderAdd;
    private javax.swing.JLabel lblHeaderAddGameProject;
    private javax.swing.JLabel lblHeaderChangeGameProject;
    private javax.swing.JLabel lblHeaderChangeHired;
    private javax.swing.JLabel lblHeaderCompetence;
    private javax.swing.JLabel lblHeaderGameProject;
    private javax.swing.JLabel lblHeaderPlatform;
    private javax.swing.JLabel lblHeaderRemove;
    private javax.swing.JLabel lblMessageChangeProject;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPlatformUpdateHeader;
    private javax.swing.JLabel lblReleaseChangeDay;
    private javax.swing.JLabel lblReleaseChangeMonth;
    private javax.swing.JLabel lblReleaseChangeYear;
    private javax.swing.JLabel lblStartDateChangeDay;
    private javax.swing.JLabel lblStartDateChangeMonth;
    private javax.swing.JLabel lblStartDateChangeYear;
    private javax.swing.JLabel lblUpdateHiredInProject;
    private javax.swing.JLabel lblUpdateHiredPosition;
    private javax.swing.JLabel lblUpdateLeader;
    private javax.swing.JLabel lblVerifyPassword;
    private javax.swing.JPanel paneAddGameProject;
    private javax.swing.JPanel paneAddHired;
    private javax.swing.JPanel paneChangeGameProject;
    private javax.swing.JPanel paneChangeHired;
    private javax.swing.JPanel paneCompetence;
    private javax.swing.JPanel paneHired;
    private javax.swing.JPanel panePlatform;
    private javax.swing.JPanel paneProject;
    private javax.swing.JPanel paneRemoveHired;
    private javax.swing.JPanel paneUpdateHired;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JPasswordField pfVerifyPassword;
    private javax.swing.JSeparator sepCompetence;
    private javax.swing.JSeparator sepPlatform;
    private javax.swing.JSeparator separatorGameProject;
    private javax.swing.JSeparator separatorHired;
    private javax.swing.JScrollPane spCompetence;
    private javax.swing.JScrollPane spGameProject;
    private javax.swing.JScrollPane spHired;
    private javax.swing.JScrollPane spPlatform;
    private javax.swing.JTextArea tasearchResult;
    private javax.swing.JTextArea tasearchResultCompetence;
    private javax.swing.JTextArea tasearchResultGameProject;
    private javax.swing.JTextArea tasearchResultPlatform;
    private javax.swing.JTextField tfAddFirstName;
    private javax.swing.JTextField tfAddLastName;
    private javax.swing.JTextField tfAddMail;
    private javax.swing.JTextField tfAddTelephone;
    private javax.swing.JTextField tfChangeFirstNameHired;
    private javax.swing.JTextField tfChangeGpReleaseDate;
    private javax.swing.JTextField tfChangeGpStartDate;
    private javax.swing.JTextField tfChangeLastNameHired;
    private javax.swing.JTextField tfChangeMailHired;
    private javax.swing.JTextField tfChangeTelephoneHired;
    private javax.swing.JTextField tfCurrentLevelChange;
    private javax.swing.JTextField tfGpAddName;
    private javax.swing.JTextField tfGpChangeName;
    private javax.swing.JTextField tfReleaseChangeYear;
    private javax.swing.JTextField tfReleaseDateYear;
    private javax.swing.JTextField tfStartDateChangeYear;
    private javax.swing.JTextField tfStartDateYear;
    private javax.swing.JTextField tfsearchField;
    private javax.swing.JTextField tfsearchFieldGameProject;
    private javax.swing.JTabbedPane tpMenu;
    private javax.swing.JTabbedPane tpSubMenuGameProject;
    private javax.swing.JTabbedPane tpSubMenuHired;
    // End of variables declaration//GEN-END:variables
}
